"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V3989) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3991) (cond ((= () V3991) ()) ((and (cons? V3991) (cons? (tl V3991))) (do (set (hd V3991) (hd (tl V3991))) (shen.multiple-set (tl (tl V3991))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3993) (declare V3993 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V4005 V4006) (cond ((and (tuple? V4005) (and (cons? (snd V4005)) (element? (hd (snd V4005)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V4005) (tl (snd V4005))) V4006)) ((and (tuple? V4005) (and (cons? (snd V4005)) (and (cons? (tl (snd V4005))) (and (= () (tl (tl (snd V4005)))) (and (cons? V4006) (and (= (hd (snd V4005)) (shen.exclamation)) (= (hd (tl (snd V4005))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V4006))) (hd V4006))) ((and (tuple? V4005) (and (cons? (snd V4005)) (= (hd (snd V4005)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V4005)) V4006) (let Find (head (shen.find-past-inputs Key? V4006)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V4005) (and (cons? (snd V4005)) (and (= () (tl (snd V4005))) (= (hd (snd V4005)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V4006) 0) (abort))) ((and (tuple? V4005) (and (cons? (snd V4005)) (= (hd (snd V4005)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V4005)) V4006) (let Pastprint (shen.print-past-inputs Key? (reverse V4006) 0) (abort)))) (true V4005)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V4008) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V4008) (nl 1)))

(defun shen.update_history (V4011 V4012) (set shen.*history* (cons V4011 V4012)))

(defun shen.toplineread () (shen.toplineread_loop (read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V4016 V4017) (cond ((and (= -1 V4016) (= () V4017)) (exit 0)) ((= V4016 (shen.hat)) (simple-error "line read aborted")) ((element? V4016 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V4017 (lambda E shen.nextline)) (let It (shen.record-it V4017) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-char-code (stinput)) (append V4017 (cons V4016 ()))) (@p Line V4017))))) (true (shen.toplineread_loop (read-char-code (stinput)) (if (= V4016 -1) V4017 (append V4017 (cons V4016 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V4023) (cond ((= + V4023) (set shen.*tc* true)) ((= - V4023) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V4025) (shen.toplevel_evaluate V4025 (value shen.*tc*)))

(defun shen.find-past-inputs (V4028 V4029) (let F (shen.find V4028 V4029) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V4032 V4033) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V4032 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V4033)))) (lambda X (shen.prefix? V4032 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V4035) (cond ((and (cons? V4035) (= (hd V4035) (shen.space))) (shen.trim-gubbins (tl V4035))) ((and (cons? V4035) (= (hd V4035) (shen.newline))) (shen.trim-gubbins (tl V4035))) ((and (cons? V4035) (= (hd V4035) (shen.carriage-return))) (shen.trim-gubbins (tl V4035))) ((and (cons? V4035) (= (hd V4035) (shen.tab))) (shen.trim-gubbins (tl V4035))) ((and (cons? V4035) (= (hd V4035) (shen.left-round))) (shen.trim-gubbins (tl V4035))) (true V4035)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V4044 V4045) (cond ((= () V4045) ()) ((and (cons? V4045) (V4044 (hd V4045))) (cons (hd V4045) (shen.find V4044 (tl V4045)))) ((cons? V4045) (shen.find V4044 (tl V4045))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V4059 V4060) (cond ((= () V4059) true) ((and (cons? V4059) (and (cons? V4060) (= (hd V4060) (hd V4059)))) (shen.prefix? (tl V4059) (tl V4060))) (true false)))

(defun shen.print-past-inputs (V4072 V4073 V4074) (cond ((= () V4073) _) ((and (cons? V4073) (not (V4072 (hd V4073)))) (shen.print-past-inputs V4072 (tl V4073) (+ V4074 1))) ((and (cons? V4073) (tuple? (hd V4073))) (do (shen.prhush (shen.app V4074 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V4073))) (shen.print-past-inputs V4072 (tl V4073) (+ V4074 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V4077 V4078) (cond ((and (cons? V4077) (and (cons? (tl V4077)) (and (= : (hd (tl V4077))) (and (cons? (tl (tl V4077))) (and (= () (tl (tl (tl V4077)))) (= true V4078)))))) (shen.typecheck-and-evaluate (hd V4077) (hd (tl (tl V4077))))) ((and (cons? V4077) (cons? (tl V4077))) (do (shen.toplevel_evaluate (cons (hd V4077) ()) V4078) (do (nl 1) (shen.toplevel_evaluate (tl V4077) V4078)))) ((and (cons? V4077) (and (= () (tl V4077)) (= true V4078))) (shen.typecheck-and-evaluate (hd V4077) (gensym A))) ((and (cons? V4077) (and (= () (tl V4077)) (= false V4078))) (let Eval (shen.eval-without-macros (hd V4077)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V4081 V4082) (let Typecheck (shen.typecheck V4081 V4082) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V4081) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V4084) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V4084) V4084))

(defun shen.extract-pvars (V4090) (cond ((shen.pvar? V4090) (cons V4090 ())) ((cons? V4090) (union (shen.extract-pvars (hd V4090)) (shen.extract-pvars (tl V4090)))) (true ())))

(defun shen.mult_subst (V4098 V4099 V4100) (cond ((= () V4098) V4100) ((= () V4099) V4100) ((and (cons? V4098) (cons? V4099)) (shen.mult_subst (tl V4098) (tl V4099) (subst (hd V4098) (hd V4099) V4100))) (true (shen.f_error shen.mult_subst))))



