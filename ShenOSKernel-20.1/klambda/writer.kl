"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V4201 V4202) (trap-error (shen.prh V4201 V4202 0) (lambda E V4201)))

(defun shen.prh (V4206 V4207 V4208) (shen.prh V4206 V4207 (shen.write-char-and-inc V4206 V4207 V4208)))

(defun shen.write-char-and-inc (V4212 V4213 V4214) (do (write-byte (string->n (pos V4212 V4214)) V4213) (+ V4214 1)))

(defun print (V4216) (let String (shen.insert V4216 "~S") (let Print (shen.prhush String (stoutput)) V4216)))

(defun shen.prhush (V4219 V4220) (if (value *hush*) V4219 (pr V4219 V4220)))

(defun shen.mkstr (V4223 V4224) (cond ((string? V4223) (shen.mkstr-l (shen.proc-nl V4223) V4224)) (true (shen.mkstr-r (cons shen.proc-nl (cons V4223 ())) V4224))))

(defun shen.mkstr-l (V4227 V4228) (cond ((= () V4228) V4227) ((cons? V4228) (shen.mkstr-l (shen.insert-l (hd V4228) V4227) (tl V4228))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V4233 V4234) (cond ((= "" V4234) "") ((and (shen.+string? V4234) (and (= "~" (pos V4234 0)) (and (shen.+string? (tlstr V4234)) (= "A" (pos (tlstr V4234) 0))))) (cons shen.app (cons V4233 (cons (tlstr (tlstr V4234)) (cons shen.a ()))))) ((and (shen.+string? V4234) (and (= "~" (pos V4234 0)) (and (shen.+string? (tlstr V4234)) (= "R" (pos (tlstr V4234) 0))))) (cons shen.app (cons V4233 (cons (tlstr (tlstr V4234)) (cons shen.r ()))))) ((and (shen.+string? V4234) (and (= "~" (pos V4234 0)) (and (shen.+string? (tlstr V4234)) (= "S" (pos (tlstr V4234) 0))))) (cons shen.app (cons V4233 (cons (tlstr (tlstr V4234)) (cons shen.s ()))))) ((shen.+string? V4234) (shen.factor-cn (cons cn (cons (pos V4234 0) (cons (shen.insert-l V4233 (tlstr V4234)) ()))))) ((and (cons? V4234) (and (= cn (hd V4234)) (and (cons? (tl V4234)) (and (cons? (tl (tl V4234))) (= () (tl (tl (tl V4234)))))))) (cons cn (cons (hd (tl V4234)) (cons (shen.insert-l V4233 (hd (tl (tl V4234)))) ())))) ((and (cons? V4234) (and (= shen.app (hd V4234)) (and (cons? (tl V4234)) (and (cons? (tl (tl V4234))) (and (cons? (tl (tl (tl V4234)))) (= () (tl (tl (tl (tl V4234)))))))))) (cons shen.app (cons (hd (tl V4234)) (cons (shen.insert-l V4233 (hd (tl (tl V4234)))) (tl (tl (tl V4234))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V4236) (cond ((and (cons? V4236) (and (= cn (hd V4236)) (and (cons? (tl V4236)) (and (cons? (tl (tl V4236))) (and (cons? (hd (tl (tl V4236)))) (and (= cn (hd (hd (tl (tl V4236))))) (and (cons? (tl (hd (tl (tl V4236))))) (and (cons? (tl (tl (hd (tl (tl V4236)))))) (and (= () (tl (tl (tl (hd (tl (tl V4236))))))) (and (= () (tl (tl (tl V4236)))) (and (string? (hd (tl V4236))) (string? (hd (tl (hd (tl (tl V4236))))))))))))))))) (cons cn (cons (cn (hd (tl V4236)) (hd (tl (hd (tl (tl V4236)))))) (tl (tl (hd (tl (tl V4236)))))))) (true V4236)))

(defun shen.proc-nl (V4238) (cond ((= "" V4238) "") ((and (shen.+string? V4238) (and (= "~" (pos V4238 0)) (and (shen.+string? (tlstr V4238)) (= "%" (pos (tlstr V4238) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V4238))))) ((shen.+string? V4238) (cn (pos V4238 0) (shen.proc-nl (tlstr V4238)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V4241 V4242) (cond ((= () V4242) V4241) ((cons? V4242) (shen.mkstr-r (cons shen.insert (cons (hd V4242) (cons V4241 ()))) (tl V4242))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V4245 V4246) (shen.insert-h V4245 V4246 ""))

(defun shen.insert-h (V4252 V4253 V4254) (cond ((= "" V4253) V4254) ((and (shen.+string? V4253) (and (= "~" (pos V4253 0)) (and (shen.+string? (tlstr V4253)) (= "A" (pos (tlstr V4253) 0))))) (cn V4254 (shen.app V4252 (tlstr (tlstr V4253)) shen.a))) ((and (shen.+string? V4253) (and (= "~" (pos V4253 0)) (and (shen.+string? (tlstr V4253)) (= "R" (pos (tlstr V4253) 0))))) (cn V4254 (shen.app V4252 (tlstr (tlstr V4253)) shen.r))) ((and (shen.+string? V4253) (and (= "~" (pos V4253 0)) (and (shen.+string? (tlstr V4253)) (= "S" (pos (tlstr V4253) 0))))) (cn V4254 (shen.app V4252 (tlstr (tlstr V4253)) shen.s))) ((shen.+string? V4253) (shen.insert-h V4252 (tlstr V4253) (cn V4254 (pos V4253 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V4258 V4259 V4260) (cn (shen.arg->str V4258 V4260) V4259))

(defun shen.arg->str (V4268 V4269) (cond ((= V4268 (fail)) "...") ((shen.list? V4268) (shen.list->str V4268 V4269)) ((string? V4268) (shen.str->str V4268 V4269)) ((absvector? V4268) (shen.vector->str V4268 V4269)) (true (shen.atom->str V4268))))

(defun shen.list->str (V4272 V4273) (cond ((= shen.r V4273) (@s "(" (@s (shen.iter-list V4272 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V4272 V4273 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4287 V4288 V4289) (cond ((= () V4287) "") ((= 0 V4289) "... etc") ((and (cons? V4287) (= () (tl V4287))) (shen.arg->str (hd V4287) V4288)) ((cons? V4287) (@s (shen.arg->str (hd V4287) V4288) (@s " " (shen.iter-list (tl V4287) V4288 (- V4289 1))))) (true (@s "|" (@s " " (shen.arg->str V4287 V4288))))))

(defun shen.str->str (V4296 V4297) (cond ((= shen.a V4297) V4296) (true (@s (n->string 34) (@s V4296 (n->string 34))))))

(defun shen.vector->str (V4300 V4301) (if (shen.print-vector? V4300) ((function (<-address V4300 0)) V4300) (if (vector? V4300) (@s "<" (@s (shen.iter-vector V4300 1 V4301 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4300 0 V4301 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V4303) (let Zero (<-address V4303 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (= Zero shen.dictionary) true (if (not (number? Zero)) (shen.fbound? Zero) false))))))

(defun shen.fbound? (V4305) (trap-error (do (shen.lookup-func V4305) true) (lambda E false)))

(defun shen.tuple (V4307) (cn "(@p " (shen.app (<-address V4307 1) (cn " " (shen.app (<-address V4307 2) ")" shen.s)) shen.s)))

(defun shen.dictionary (V4309) "(dict ...)")

(defun shen.iter-vector (V4320 V4321 V4322 V4323) (cond ((= 0 V4323) "... etc") (true (let Item (<-address/or V4320 V4321 (freeze shen.out-of-bounds)) (let Next (<-address/or V4320 (+ V4321 1) (freeze shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4322) (@s (shen.arg->str Item V4322) (@s " " (shen.iter-vector V4320 (+ V4321 1) V4322 (- V4323 1)))))))))))

(defun shen.atom->str (V4325) (trap-error (str V4325) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4327) (or (empty? V4327) (cons? V4327)))



