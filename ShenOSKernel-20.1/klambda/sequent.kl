"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2629) (cond ((and (cons? V2629) (and (cons? (tl V2629)) (= () (tl (tl V2629))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2629)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2631) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2631) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2631) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2633) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2633) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2633) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2635) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2635) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2635) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2637) (let YaccParse (if (and (cons? (hd V2637)) (= if (hd (hd V2637)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2637)) (shen.hdtl V2637))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2637)) (= let (hd (hd V2637)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2637)) (shen.hdtl V2637))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2639) (if (cons? (hd V2639)) (let Parse_X (hd (hd V2639)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2639)) (shen.hdtl V2639))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2641) (if (cons? (hd V2641)) (let Parse_X (hd (hd V2641)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2641)) (shen.hdtl V2641))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2643) (cond ((and (cons? V2643) (and (cons? (tl V2643)) (and (cons? (tl (tl V2643))) (and (= () (tl (tl (tl V2643)))) (= (hd (tl V2643)) bar!))))) (cons (hd V2643) (hd (tl (tl V2643))))) ((cons? V2643) (cons (shen.remove-bar (hd V2643)) (shen.remove-bar (tl V2643)))) (true V2643)))

(defun shen.<premises> (V2645) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2645) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2645) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2647) (if (cons? (hd V2647)) (let Parse_X (hd (hd V2647)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2647)) (shen.hdtl V2647))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2649) (let YaccParse (if (and (cons? (hd V2649)) (= ! (hd (hd V2649)))) (shen.pair (hd (shen.pair (tl (hd V2649)) (shen.hdtl V2649))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2649) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2649) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2651) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2651) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2651) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2654 V2655) (@p V2654 V2655))

(defun shen.<formulae> (V2657) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2657) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2657) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2657) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2659) (if (cons? (hd V2659)) (let Parse_X (hd (hd V2659)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2659)) (shen.hdtl V2659))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2661) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2661) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2661) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2663) (let Parse_shen.<expr> (shen.<expr> V2663) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2665) (if (cons? (hd V2665)) (let Parse_X (hd (hd V2665)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2665)) (shen.hdtl V2665))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2667) (if (cons? (hd V2667)) (let Parse_X (hd (hd V2667)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2667)) (shen.hdtl V2667))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2669) (and (symbol? V2669) (shen.sh? (str V2669))))

(defun shen.sh? (V2671) (cond ((= "_" V2671) true) (true (and (= (pos V2671 0) "_") (shen.sh? (tlstr V2671))))))

(defun shen.doubleunderline? (V2673) (and (symbol? V2673) (shen.dh? (str V2673))))

(defun shen.dh? (V2675) (cond ((= "=" V2675) true) (true (and (= (pos V2675 0) "=") (shen.dh? (tlstr V2675))))))

(defun shen.process-datatype (V2678 V2679) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2678 V2679))))

(defun shen.remember-datatype (V2685) (cond ((cons? V2685) (do (set shen.*datatypes* (adjoin (hd V2685) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2685) (value shen.*alldatatypes*))) (hd V2685)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2690 V2691) (cond ((= () V2691) ()) ((and (cons? V2691) (and (tuple? (hd V2691)) (= shen.single (fst (hd V2691))))) (cons (shen.rule->horn-clause V2690 (snd (hd V2691))) (shen.rules->horn-clauses V2690 (tl V2691)))) ((and (cons? V2691) (and (tuple? (hd V2691)) (= shen.double (fst (hd V2691))))) (shen.rules->horn-clauses V2690 (append (shen.double->singles (snd (hd V2691))) (tl V2691)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2693) (cons (shen.right-rule V2693) (cons (shen.left-rule V2693) ())))

(defun shen.right-rule (V2695) (@p shen.single V2695))

(defun shen.left-rule (V2697) (cond ((and (cons? V2697) (and (cons? (tl V2697)) (and (cons? (tl (tl V2697))) (and (tuple? (hd (tl (tl V2697)))) (and (= () (fst (hd (tl (tl V2697))))) (= () (tl (tl (tl V2697))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2697)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2697))) Q) ()) (@p shen.single (cons (hd V2697) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2703) (cond ((and (tuple? V2703) (= () (fst V2703))) (snd V2703)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2706 V2707) (cond ((and (cons? V2707) (and (cons? (tl V2707)) (and (cons? (tl (tl V2707))) (and (tuple? (hd (tl (tl V2707)))) (= () (tl (tl (tl V2707)))))))) (cons (shen.rule->horn-clause-head V2706 (snd (hd (tl (tl V2707))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2707) (hd (tl V2707)) (fst (hd (tl (tl V2707))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2710 V2711) (cons V2710 (cons (shen.mode-ify V2711) (cons Context_1957 ()))))

(defun shen.mode-ify (V2713) (cond ((and (cons? V2713) (and (cons? (tl V2713)) (and (= : (hd (tl V2713))) (and (cons? (tl (tl V2713))) (= () (tl (tl (tl V2713)))))))) (cons mode (cons (cons (hd V2713) (cons : (cons (cons mode (cons (hd (tl (tl V2713))) (cons + ()))) ()))) (cons - ())))) (true V2713)))

(defun shen.rule->horn-clause-body (V2717 V2718 V2719) (let Variables (map (lambda X (shen.extract_vars X)) V2719) (let Predicates (map (lambda X (gensym shen.cl)) V2719) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2719 Variables) (let SideLiterals (shen.construct-side-literals V2717) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2719))) V2718) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2728 V2729 V2730 V2731) (cond ((and (= () V2728) (= () V2729)) ()) (true (shen.csl-help V2728 V2729 V2730 V2731))))

(defun shen.csl-help (V2738 V2739 V2740 V2741) (cond ((and (= () V2738) (= () V2739)) (cons (cons bind (cons ContextOut_1957 (cons V2740 ()))) ())) ((and (cons? V2738) (cons? V2739)) (cons (cons (hd V2738) (cons V2740 (cons V2741 (hd V2739)))) (shen.csl-help (tl V2738) (tl V2739) V2741 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2745 V2746 V2747) (cond ((and (= () V2745) (and (= () V2746) (= () V2747))) shen.skip) ((and (cons? V2745) (and (cons? V2746) (cons? V2747))) (do (shen.construct-search-clause (hd V2745) (hd V2746) (hd V2747)) (shen.construct-search-clauses (tl V2745) (tl V2746) (tl V2747)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2751 V2752 V2753) (shen.s-prolog (cons (shen.construct-base-search-clause V2751 V2752 V2753) (cons (shen.construct-recursive-search-clause V2751 V2752 V2753) ()))))

(defun shen.construct-base-search-clause (V2757 V2758 V2759) (cons (cons V2757 (cons (cons (shen.mode-ify V2758) In_1957) (cons In_1957 V2759))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2763 V2764 V2765) (cons (cons V2763 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2765))) (cons :- (cons (cons (cons V2763 (cons Assumptions_1957 (cons Out_1957 V2765))) ()) ()))))

(defun shen.construct-side-literals (V2771) (cond ((= () V2771) ()) ((and (cons? V2771) (and (cons? (hd V2771)) (and (= if (hd (hd V2771))) (and (cons? (tl (hd V2771))) (= () (tl (tl (hd V2771)))))))) (cons (cons when (tl (hd V2771))) (shen.construct-side-literals (tl V2771)))) ((and (cons? V2771) (and (cons? (hd V2771)) (and (= let (hd (hd V2771))) (and (cons? (tl (hd V2771))) (and (cons? (tl (tl (hd V2771)))) (= () (tl (tl (tl (hd V2771)))))))))) (cons (cons is (tl (hd V2771))) (shen.construct-side-literals (tl V2771)))) ((cons? V2771) (shen.construct-side-literals (tl V2771))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2778 V2779) (cond ((tuple? V2778) (cons shen.t* (cons (shen.recursive_cons_form (snd V2778)) (cons (shen.construct-context V2779 (fst V2778)) ())))) ((= ! V2778) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2782 V2783) (cond ((and (= true V2782) (= () V2783)) Context_1957) ((and (= false V2782) (= () V2783)) ContextOut_1957) ((cons? V2783) (cons cons (cons (shen.recursive_cons_form (hd V2783)) (cons (shen.construct-context V2782 (tl V2783)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2785) (cond ((cons? V2785) (cons cons (cons (shen.recursive_cons_form (hd V2785)) (cons (shen.recursive_cons_form (tl V2785)) ())))) (true V2785)))

(defun preclude (V2787) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2787)))

(defun shen.preclude-h (V2789) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2789)) (value shen.*datatypes*)))

(defun include (V2791) (shen.include-h (map (lambda X (shen.intern-type X)) V2791)))

(defun shen.include-h (V2793) (let ValidTypes (intersection V2793 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2795) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2795))))

(defun include-all-but (V2797) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2797))))

(defun shen.synonyms-help (V2803) (cond ((= () V2803) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2803) (cons? (tl V2803))) (let Vs (difference (shen.extract_vars (hd (tl V2803))) (shen.extract_vars (hd V2803))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2803) (cons (hd (tl V2803)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2803)))) (shen.free_variable_warnings (hd (tl V2803)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2806 V2807) (if (element? V2806 (value V2807)) (value V2807) (set V2807 (cons V2806 (value V2807)))))

(defun shen.demod-rule (V2809) (cond ((and (cons? V2809) (and (cons? (tl V2809)) (= () (tl (tl V2809))))) (cons (shen.rcons_form (hd V2809)) (cons -> (cons (shen.rcons_form (hd (tl V2809))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2815) (cond ((and (cons? V2815) (and (= defun (hd V2815)) (and (cons? (tl V2815)) (and (cons? (tl (tl V2815))) (and (cons? (hd (tl (tl V2815)))) (and (= () (tl (hd (tl (tl V2815))))) (and (cons? (tl (tl (tl V2815)))) (= () (tl (tl (tl (tl V2815)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2815)))) (tl (tl (tl V2815))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2818 V2819) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2819 (shen.default-rule))))))) (do (if V2818 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



