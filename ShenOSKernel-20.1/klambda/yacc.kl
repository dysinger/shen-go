"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4329) (cond ((and (cons? V4329) (and (= defcc (hd V4329)) (cons? (tl V4329)))) (shen.yacc->shen (hd (tl V4329)) (tl (tl V4329)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4332 V4333) (let CCRules (shen.split_cc_rules true V4333 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4332 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4335) (cond ((> (occurrences kill V4335) 0) (cons trap-error (cons V4335 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4335)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4337) (let String (error-to-string V4337) (if (= String "yacc kill") (fail) V4337)))

(defun shen.split_cc_rules (V4343 V4344 V4345) (cond ((and (= () V4344) (= () V4345)) ()) ((= () V4344) (cons (shen.split_cc_rule V4343 (reverse V4345) ()) ())) ((and (cons? V4344) (= ; (hd V4344))) (cons (shen.split_cc_rule V4343 (reverse V4345) ()) (shen.split_cc_rules V4343 (tl V4344) ()))) ((cons? V4344) (shen.split_cc_rules V4343 (tl V4344) (cons (hd V4344) V4345))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4353 V4354 V4355) (cond ((and (cons? V4354) (and (= := (hd V4354)) (and (cons? (tl V4354)) (= () (tl (tl V4354)))))) (cons (reverse V4355) (tl V4354))) ((and (cons? V4354) (and (= := (hd V4354)) (and (cons? (tl V4354)) (and (cons? (tl (tl V4354))) (and (= where (hd (tl (tl V4354)))) (and (cons? (tl (tl (tl V4354)))) (= () (tl (tl (tl (tl V4354))))))))))) (cons (reverse V4355) (cons (cons where (cons (hd (tl (tl (tl V4354)))) (cons (hd (tl V4354)) ()))) ()))) ((= () V4354) (do (shen.semantic-completion-warning V4353 V4355) (shen.split_cc_rule V4353 (cons := (cons (shen.default_semantics (reverse V4355)) ())) V4355))) ((cons? V4354) (shen.split_cc_rule V4353 (tl V4354) (cons (hd V4354) V4355))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4366 V4367) (cond ((= true V4366) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4367)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4369) (cond ((= () V4369) ()) ((and (cons? V4369) (and (= () (tl V4369)) (shen.grammar_symbol? (hd V4369)))) (hd V4369)) ((and (cons? V4369) (shen.grammar_symbol? (hd V4369))) (cons append (cons (hd V4369) (cons (shen.default_semantics (tl V4369)) ())))) ((cons? V4369) (cons cons (cons (hd V4369) (cons (shen.default_semantics (tl V4369)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4371) (and (symbol? V4371) (let Cs (shen.strip-pathname (explode V4371)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4373) (cond ((and (cons? V4373) (= () (tl V4373))) (hd V4373)) ((cons? V4373) (let P YaccParse (cons let (cons P (cons (hd V4373) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4373)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4375) (cond ((and (cons? V4375) (and (cons? (tl V4375)) (= () (tl (tl V4375))))) (shen.syntax (hd V4375) Stream (hd (tl V4375)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4379 V4380 V4381) (cond ((and (= () V4379) (and (cons? V4381) (and (= where (hd V4381)) (and (cons? (tl V4381)) (and (cons? (tl (tl V4381))) (= () (tl (tl (tl V4381))))))))) (cons if (cons (shen.semantics (hd (tl V4381))) (cons (cons shen.pair (cons (cons hd (cons V4380 ())) (cons (shen.semantics (hd (tl (tl V4381)))) ()))) (cons (cons fail ()) ()))))) ((= () V4379) (cons shen.pair (cons (cons hd (cons V4380 ())) (cons (shen.semantics V4381) ())))) ((cons? V4379) (if (shen.grammar_symbol? (hd V4379)) (shen.recursive_descent V4379 V4380 V4381) (if (variable? (hd V4379)) (shen.variable-match V4379 V4380 V4381) (if (shen.jump_stream? (hd V4379)) (shen.jump_stream V4379 V4380 V4381) (if (shen.terminal? (hd V4379)) (shen.check_stream V4379 V4380 V4381) (if (cons? (hd V4379)) (shen.list-stream (shen.decons (hd V4379)) (tl V4379) V4380 V4381) (simple-error (shen.app (hd V4379) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4386 V4387 V4388 V4389) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4388 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4388 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4387 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4388 ())) ())) (cons (cons hd (cons (cons tl (cons V4388 ())) ())) ()))) V4389) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4386 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4388 ())) ())) (cons (cons hd (cons (cons tl (cons V4388 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4391) (cond ((and (cons? V4391) (and (= cons (hd V4391)) (and (cons? (tl V4391)) (and (cons? (tl (tl V4391))) (and (= () (hd (tl (tl V4391)))) (= () (tl (tl (tl V4391))))))))) (cons (hd (tl V4391)) ())) ((and (cons? V4391) (and (= cons (hd V4391)) (and (cons? (tl V4391)) (and (cons? (tl (tl V4391))) (= () (tl (tl (tl V4391)))))))) (cons (hd (tl V4391)) (shen.decons (hd (tl (tl V4391)))))) (true V4391)))

(defun shen.insert-runon (V4406 V4407 V4408) (cond ((and (cons? V4408) (and (= shen.pair (hd V4408)) (and (cons? (tl V4408)) (and (cons? (tl (tl V4408))) (and (= () (tl (tl (tl V4408)))) (= (hd (tl (tl V4408))) V4407)))))) V4406) ((cons? V4408) (map (lambda Z (shen.insert-runon V4406 V4407 Z)) V4408)) (true V4408)))

(defun shen.strip-pathname (V4414) (cond ((not (element? "." V4414)) V4414) ((cons? V4414) (shen.strip-pathname (tl V4414))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4418 V4419 V4420) (cond ((cons? V4418) (let Test (cons (hd V4418) (cons V4419 ())) (let Action (shen.syntax (tl V4418) (concat Parse_ (hd V4418)) V4420) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4418)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4418)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4424 V4425 V4426) (cond ((cons? V4424) (let Test (cons cons? (cons (cons hd (cons V4425 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4424)) (cons (cons hd (cons (cons hd (cons V4425 ())) ())) (cons (shen.syntax (tl V4424) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4425 ())) ())) (cons (cons shen.hdtl (cons V4425 ())) ()))) V4426) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4436) (cond ((cons? V4436) false) ((variable? V4436) false) (true true)))

(defun shen.jump_stream? (V4442) (cond ((= V4442 _) true) (true false)))

(defun shen.check_stream (V4446 V4447 V4448) (cond ((cons? V4446) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4447 ())) ())) (cons (cons = (cons (hd V4446) (cons (cons hd (cons (cons hd (cons V4447 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4446) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4447 ())) ())) (cons (cons shen.hdtl (cons V4447 ())) ()))) V4448) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4452 V4453 V4454) (cond ((cons? V4452) (let Test (cons cons? (cons (cons hd (cons V4453 ())) ())) (let Action (shen.syntax (tl V4452) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4453 ())) ())) (cons (cons shen.hdtl (cons V4453 ())) ()))) V4454) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4456) (cond ((= () V4456) ()) ((shen.grammar_symbol? V4456) (cons shen.hdtl (cons (concat Parse_ V4456) ()))) ((variable? V4456) (concat Parse_ V4456)) ((cons? V4456) (map (lambda Z (shen.semantics Z)) V4456)) (true V4456)))

(defun shen.snd-or-fail (V4464) (cond ((and (cons? V4464) (and (cons? (tl V4464)) (= () (tl (tl V4464))))) (hd (tl V4464))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4467 V4468) (cons V4467 (cons V4468 ())))

(defun shen.hdtl (V4470) (hd (tl V4470)))

(defun <!> (V4478) (cond ((and (cons? V4478) (and (cons? (tl V4478)) (= () (tl (tl V4478))))) (cons () (cons (hd V4478) ()))) (true (fail))))

(defun <e> (V4484) (cond ((and (cons? V4484) (and (cons? (tl V4484)) (= () (tl (tl V4484))))) (cons (hd V4484) (cons () ()))) (true (shen.f_error <e>))))



