"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun primitive? (V1385) (native primitive? V1385))

(defun primitive-arity (V1387) (native primitive-arity V1387))

(defun primitive-id (V1389) (native primitive-id V1389))

(defun fail () shen.fail!)(defun shen.f_error (X) (simple-error (str X)))

(defun boolean? (V1395) (cond ((= true V1395) true) ((= false V1395) true) (true false)))

(defun reverse (V1397) (reverse_help V1397 ()))

(defun reverse_help (V1400 V1401) (cond ((= () V1400) V1401) ((cons? V1400) (reverse_help (tl V1400) (cons (hd V1400) V1401))) (true (shen.f_error reverse_help))))

(defun map (V1404 V1405) (map-h V1404 V1405 ()))

(defun map-h (V1411 V1412 V1413) (cond ((= () V1412) (reverse V1413)) ((cons? V1412) (map-h V1411 (tl V1412) (cons (V1411 (hd V1412)) V1413))) (true (shen.f_error map-h))))

(defun append (V1416 V1417) (cond ((= () V1416) V1417) ((cons? V1416) (cons (hd V1416) (append (tl V1416) V1417))) (true (shen.f_error append))))

(defun fold-left (V1421 V1422 V1423) (cond ((= () V1423) V1422) ((cons? V1423) (fold-left V1421 (V1421 V1422 (hd V1423)) (tl V1423))) (true (shen.f_error fold-left))))

(defun mapcan (V1428 V1429) (cond ((= () V1429) ()) ((cons? V1429) (append (V1428 (hd V1429)) (mapcan V1428 (tl V1429)))) (true (shen.f_error mapcan))))

(defun length (V3293) (shen.length-h V3293 0))

(defun shen.length-h (V3296 V3297) (cond ((= () V3296) V3297) (true (shen.length-h (tl V3296) (+ V3297 1)))))



