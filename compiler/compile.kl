"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1453) (cond ((and (cons? V1453) (and (= $symbol (hd V1453)) (and (cons? (tl V1453)) (= () (tl (tl V1453)))))) (cons (cons iConst (tl V1453)) ())) ((and (cons? V1453) (and (= $const (hd V1453)) (and (cons? (tl V1453)) (= () (tl (tl V1453)))))) (cons (cons iConst (tl V1453)) ())) ((and (cons? V1453) (and (= $var (hd V1453)) (and (cons? (tl V1453)) (= () (tl (tl V1453)))))) (cons (cons iAccess (tl V1453)) ())) ((and (cons? V1453) (and (= $if (hd V1453)) (and (cons? (tl V1453)) (and (cons? (tl (tl V1453))) (and (cons? (tl (tl (tl V1453)))) (= () (tl (tl (tl (tl V1453)))))))))) (append (compile1 (hd (tl V1453))) (cons (cons iJF (compile1 (hd (tl (tl V1453))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V1453)))))) ())))) ((and (cons? V1453) (and (= $do (hd V1453)) (and (cons? (tl V1453)) (and (cons? (tl (tl V1453))) (= () (tl (tl (tl V1453)))))))) (append (compile1 (hd (tl V1453))) (cons (cons iPop ()) (compile1 (hd (tl (tl V1453))))))) ((and (cons? V1453) (and (= $defun (hd V1453)) (and (cons? (tl V1453)) (and (cons? (tl (tl V1453))) (= () (tl (tl (tl V1453)))))))) (append (compile1 (hd (tl (tl V1453)))) (cons (cons iConst (cons (hd (tl V1453)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V1453) (and (= $prim (hd V1453)) (cons? (tl V1453)))) (compile-primitive-call (hd (tl V1453)) (tl (tl V1453)))) ((and (cons? V1453) (and (= $app (hd V1453)) (cons? (tl V1453)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V1453)) (tl (tl V1453))) (cons (cons iApply ()) ())))) ((and (cons? V1453) (and (= $abs (hd V1453)) (and (cons? (tl V1453)) (= () (tl (tl V1453)))))) (cons (cons iFreeze (cons (cons iGrab ()) (compile-tail (hd (tl V1453))))) ())) ((and (cons? V1453) (and (= $freeze (hd V1453)) (and (cons? (tl V1453)) (= () (tl (tl V1453)))))) (cons (cons iFreeze (compile-tail (hd (tl V1453)))) ())) ((and (cons? V1453) (and (= $trap (hd V1453)) (and (cons? (tl V1453)) (and (cons? (tl (tl V1453))) (= () (tl (tl (tl V1453)))))))) (append (compile1 (hd (tl (tl V1453)))) (cons (cons iSetJmp (append (compile1 (hd (tl V1453))) (cons (cons iClearJmp ()) ()))) ()))) (true (shen.f_error compile1))))

(defun compile-tail (V1455) (cond ((and (cons? V1455) (and (= $if (hd V1455)) (and (cons? (tl V1455)) (and (cons? (tl (tl V1455))) (and (cons? (tl (tl (tl V1455)))) (= () (tl (tl (tl (tl V1455)))))))))) (append (compile1 (hd (tl V1455))) (cons (cons iJF (compile-tail (hd (tl (tl V1455))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V1455)))))) ())))) ((and (cons? V1455) (and (= $do (hd V1455)) (and (cons? (tl V1455)) (and (cons? (tl (tl V1455))) (= () (tl (tl (tl V1455)))))))) (append (compile1 (hd (tl V1455))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V1455))))))) ((and (cons? V1455) (and (= $abs (hd V1455)) (and (cons? (tl V1455)) (= () (tl (tl V1455)))))) (cons (cons iGrab ()) (compile-tail (hd (tl V1455))))) ((and (cons? V1455) (and (= $app (hd V1455)) (cons? (tl V1455)))) (append (compile-apply (hd (tl V1455)) (tl (tl V1455))) (cons (cons iTailApply ()) ()))) (true (append (compile1 V1455) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V1458 V1459) (cond ((= native V1458) (append (compile-arg-list V1459) (cons (cons iNativeCall (cons (length V1459) ())) ()))) ((= (length V1459) (primitive-arity V1458)) (append (compile-arg-list V1459) (cons (cons iPrimCall (cons (primitive-id V1458) ())) ()))) (true (compile1 (curry-primitive V1458 V1459)))))

(defun compile-apply (V1462 V1463) (append (compile-arg-list (reverse V1463)) (compile-function V1462)))

(defun compile-function (V1465) (cond ((and (cons? V1465) (and (= $symbol (hd V1465)) (and (cons? (tl V1465)) (= () (tl (tl V1465)))))) (cons (cons iConst (tl V1465)) (cons (cons iGetF ()) ()))) (true (compile1 V1465))))

(defun compile-arg-list (V1467) (mapcan (lambda V1451 (compile1 V1451)) V1467))

(defun curry-primitive (V1470 V1471) (let Count (- (primitive-arity V1470) (length V1471)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $prim (cons V1470 (append V1471 PadList))) Pad)))))

(defun rrange (V1473) (rrange0 V1473 0 ()))

(defun rrange0 (V1478 V1479 V1480) (cond ((= V1479 V1478) V1480) (true (rrange0 V1478 (+ V1479 1) (cons V1479 V1480)))))

(defun kl->bytecode (V1482) (append (compile-tail (de-bruijn V1482)) (cons (cons iHalt ()) ())))



