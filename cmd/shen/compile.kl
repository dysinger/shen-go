"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V3271 V3272) (cond ((and (cons? V3272) (and (= $symbol (hd V3272)) (and (cons? (tl V3272)) (= () (tl (tl V3272)))))) (cons (cons iConst (tl V3272)) ())) ((and (cons? V3272) (and (= $const (hd V3272)) (and (cons? (tl V3272)) (= () (tl (tl V3272)))))) (cons (cons iConst (tl V3272)) ())) ((and (cons? V3272) (and (= $var (hd V3272)) (and (cons? (tl V3272)) (= () (tl (tl V3272)))))) (cons (cons iAccess (tl V3272)) ())) ((and (cons? V3272) (and (= $if (hd V3272)) (and (cons? (tl V3272)) (and (cons? (tl (tl V3272))) (and (cons? (tl (tl (tl V3272)))) (= () (tl (tl (tl (tl V3272)))))))))) (append (compile1 false (hd (tl V3272))) (cons (cons iJF (compile1 V3271 (hd (tl (tl V3272))))) (cons (cons iJMP (compile1 V3271 (hd (tl (tl (tl V3272)))))) ())))) ((and (cons? V3272) (and (= $do (hd V3272)) (and (cons? (tl V3272)) (and (cons? (tl (tl V3272))) (= () (tl (tl (tl V3272)))))))) (append (compile1 false (hd (tl V3272))) (cons (cons iPop ()) (compile1 V3271 (hd (tl (tl V3272))))))) ((and (cons? V3272) (and (= $defun (hd V3272)) (and (cons? (tl V3272)) (and (cons? (tl (tl V3272))) (= () (tl (tl (tl V3272)))))))) (append (compile1 V3271 (hd (tl (tl V3272)))) (cons (cons iConst (cons (hd (tl V3272)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V3272) (and (= $app (hd V3272)) (cons? (tl V3272)))) (compile-apply V3271 (hd (tl V3272)) (tl (tl V3272)))) ((and (cons? V3272) (and (= $abs (hd V3272)) (and (cons? (tl V3272)) (= () (tl (tl V3272)))))) (cons (cons iGrab (append (compile1 V3271 (hd (tl V3272))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V3272) (and (= $freeze (hd V3272)) (and (cons? (tl V3272)) (= () (tl (tl V3272)))))) (cons (cons iFreeze (append (compile1 V3271 (hd (tl V3272))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V3272) (and (= $trap (hd V3272)) (and (cons? (tl V3272)) (and (cons? (tl (tl V3272))) (= () (tl (tl (tl V3272)))))))) (cons (cons iFreeze (compile1 V3271 (hd (tl (tl V3272))))) (cons (cons iSetJmp (append (compile1 false (hd (tl V3272))) (cons (cons iClearJmp ()) ()))) ()))) (true V3272)))

(defun compile-apply (V3276 V3277 V3278) (cond ((and (cons? V3277) (and (= $symbol (hd V3277)) (and (cons? (tl V3277)) (and (= () (tl (tl V3277))) (primitive? (hd (tl V3277))))))) (if (= (length V3278) (primitive-arity (hd (tl V3277)))) (append (compile-arg-list V3278) (cons (cons iPrimCall (cons (primitive-id (hd (tl V3277))) ())) ())) (compile1 V3276 (curry-primitive (hd (tl V3277)) V3278)))) ((= () V3278) (apply-function V3276 V3277)) ((= false V3276) (cons (cons iMark ()) (append (compile-arg-list (reverse V3278)) (apply-function false V3277)))) ((= true V3276) (append (compile-arg-list (reverse V3278)) (apply-function true V3277))) (true (shen.f_error compile-apply))))

(defun apply-function (V3281 V3282) (cond ((and (cons? V3282) (and (= $symbol (hd V3282)) (and (cons? (tl V3282)) (= () (tl (tl V3282)))))) (cons (cons iConst (tl V3282)) (cons (cons iGetF ()) (cons (if V3281 (cons iTailApply ()) (cons iApply ())) ())))) (true (compile1 false V3282))))

(defun compile-arg-list (V3284) (mapcan (compile1 false) V3284))

(defun curry-primitive (V3287 V3288) (let Count (- (primitive-arity V3287) (length V3288)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V3287 ())) (append V3288 PadList))) Pad)))))

(defun rrange (V3290) (rrange0 V3290 0 ()))

(defun rrange0 (V3295 V3296 V3297) (cond ((= V3296 V3295) V3297) (true (rrange0 V3295 (+ V3296 1) (cons V3296 V3297)))))

(defun kl->bytecode (V3299) (append (compile1 true (de-bruijn V3299)) (cons (cons iHalt ()) ())))



