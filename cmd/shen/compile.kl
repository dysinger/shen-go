(defun compile1 (V1650)
  (cond ((and (cons? V1650) (and (= $symbol (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650))))))
         (cons (cons iConst (tl V1650)) ()))
        ((and (cons? V1650) (and (= $const (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650))))))
         (cons (cons iConst (tl V1650)) ()))
        ((and (cons? V1650) (and (= $var (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iAccess (tl V1650)) ()))
        ((and (cons? V1650) (and (= $if (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (and (cons? (tl (tl (tl V1650)))) (= () (tl (tl (tl (tl V1650))))))))))
         (append (compile1 (hd (tl V1650))) (cons (cons iJF (compile1 (hd (tl (tl V1650))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V1650)))))) ()))))
        ((and (cons? V1650) (and (= $do (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650))))))))
         (append (compile1 (hd (tl V1650))) (cons (cons iPop ()) (compile1 (hd (tl (tl V1650)))))))
        ((and (cons? V1650) (and (= $defun (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650))))))))
         (append (compile1 (hd (tl (tl V1650)))) (cons (cons iConst (cons (hd (tl V1650)) ())) (cons (cons iDefun ()) ()))))
        ((and (cons? V1650) (and (= $prim (hd V1650)) (cons? (tl V1650))))
         (compile-primitive-call (hd (tl V1650)) (tl (tl V1650))))
        ((and (cons? V1650) (and (= $app (hd V1650)) (cons? (tl V1650))))
         (cons (cons iMark ()) (append (compile-apply (hd (tl V1650)) (tl (tl V1650))) (cons (cons iApply ()) ()))))
        ((and (cons? V1650) (and (= $abs (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650))))))
         (cons (cons iFreeze (cons (cons iGrab ()) (compile-tail (hd (tl V1650))))) ()))
        ((and (cons? V1650) (and (= $freeze (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650))))))
         (cons (cons iFreeze (compile-tail (hd (tl V1650)))) ()))
        ((and (cons? V1650) (and (= $trap (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650))))))))
         (append (compile1 (hd (tl (tl V1650)))) (cons (cons iSetJmp (append (compile1 (hd (tl V1650))) (cons (cons iClearJmp ()) ()))) ())))
        (true (shen.f_error compile1))))

(defun compile-tail (V1652)
  (cond ((and (cons? V1652) (and (= $if (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (and (cons? (tl (tl (tl V1652)))) (= () (tl (tl (tl (tl V1652))))))))))
         (append (compile1 (hd (tl V1652))) (cons (cons iJF (compile-tail (hd (tl (tl V1652))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V1652)))))) ()))))
        ((and (cons? V1652) (and (= $do (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (= () (tl (tl (tl V1652))))))))
         (append (compile1 (hd (tl V1652))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V1652)))))))
        ((and (cons? V1652) (and (= $abs (hd V1652)) (and (cons? (tl V1652)) (= () (tl (tl V1652)))))) (cons (cons iGrab ()) (compile-tail (hd (tl V1652)))))
        ((and (cons? V1652) (and (= $app (hd V1652)) (cons? (tl V1652)))) (append (compile-apply (hd (tl V1652)) (tl (tl V1652))) (cons (cons iTailApply ()) ())))
        (true (append (compile1 V1652) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V1655 V1656)
  (cond ((= native V1655) (append (compile-arg-list V1656) (cons (cons iNativeCall (cons (length V1656) ())) ())))
        ((= (length V1656) (native primitive-arity V1655)) (append (compile-arg-list V1656) (cons (cons iPrimCall (cons (native primitive-id V1655) ())) ())))
        (true (compile1 (curry-primitive V1655 V1656)))))

(defun compile-apply (V1659 V1660)
  (append (compile-arg-list (reverse V1660)) (compile-function V1659)))

(defun compile-function (V1662)
  (cond ((and (cons? V1662) (and (= $symbol (hd V1662)) (and (cons? (tl V1662)) (= () (tl (tl V1662))))))
         (cons (cons iConst (tl V1662)) (cons (cons iGetF ()) ())))
        (true (compile1 V1662))))

(defun compile-arg-list (V1664)
  (mapcan (lambda V1648 (compile1 V1648)) V1664))

(defun curry-primitive (V1667 V1668)
  (let Count (- (native primitive-arity V1667) (length V1668))
       (let Pad (rrange Count)
            (let PadList (map (lambda X (cons $var (cons X ()))) Pad)
                 (fold-left (lambda X (lambda Y (cons $abs (cons X ()))))
                            (cons $prim (cons V1667 (append V1668 PadList))) Pad)))))

(defun rrange (V1670) (rrange0 V1670 0 ()))

(defun rrange0 (V1675 V1676 V1677)
  (cond ((= V1676 V1675) V1677)
        (true (rrange0 V1675 (+ V1676 1) (cons V1676 V1677)))))

(defun kl->bytecode (V1679)
  (append (compile-tail (de-bruijn V1679)) (cons (cons iHalt ()) ())))



