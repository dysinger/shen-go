"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V2194 V2195) (cond ((and (cons? V2195) (and (= $symbol (hd V2195)) (and (cons? (tl V2195)) (= () (tl (tl V2195)))))) (cons (cons iConst (tl V2195)) ())) ((and (cons? V2195) (and (= $const (hd V2195)) (and (cons? (tl V2195)) (= () (tl (tl V2195)))))) (cons (cons iConst (tl V2195)) ())) ((and (cons? V2195) (and (= $var (hd V2195)) (and (cons? (tl V2195)) (= () (tl (tl V2195)))))) (cons (cons iAccess (tl V2195)) ())) ((and (cons? V2195) (and (= $if (hd V2195)) (and (cons? (tl V2195)) (and (cons? (tl (tl V2195))) (and (cons? (tl (tl (tl V2195)))) (= () (tl (tl (tl (tl V2195)))))))))) (append (compile1 false (hd (tl V2195))) (cons (cons iJF (compile1 V2194 (hd (tl (tl V2195))))) (cons (cons iJMP (compile1 V2194 (hd (tl (tl (tl V2195)))))) ())))) ((and (cons? V2195) (and (= $do (hd V2195)) (and (cons? (tl V2195)) (and (cons? (tl (tl V2195))) (= () (tl (tl (tl V2195)))))))) (append (compile1 false (hd (tl V2195))) (cons (cons iPop ()) (compile1 V2194 (hd (tl (tl V2195))))))) ((and (cons? V2195) (and (= $defun (hd V2195)) (and (cons? (tl V2195)) (and (cons? (tl (tl V2195))) (= () (tl (tl (tl V2195)))))))) (append (compile1 V2194 (hd (tl (tl V2195)))) (cons (cons iConst (cons (hd (tl V2195)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V2195) (and (= $app (hd V2195)) (cons? (tl V2195)))) (compile-apply V2194 (hd (tl V2195)) (tl (tl V2195)))) ((and (cons? V2195) (and (= $abs (hd V2195)) (and (cons? (tl V2195)) (= () (tl (tl V2195)))))) (cons (cons iGrab (append (compile1 V2194 (hd (tl V2195))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V2195) (and (= $freeze (hd V2195)) (and (cons? (tl V2195)) (= () (tl (tl V2195)))))) (cons (cons iFreeze (append (compile1 V2194 (hd (tl V2195))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V2195) (and (= $trap (hd V2195)) (and (cons? (tl V2195)) (and (cons? (tl (tl V2195))) (= () (tl (tl (tl V2195)))))))) (append (compile1 V2194 (hd (tl (tl V2195)))) (cons (cons iSetJmp (append (compile1 false (hd (tl V2195))) (cons (cons iClearJmp ()) ()))) ()))) (true V2195)))

(defun compile-apply (V2199 V2200 V2201) (cond ((and (cons? V2200) (and (= $symbol (hd V2200)) (and (cons? (tl V2200)) (and (= () (tl (tl V2200))) (primitive? (hd (tl V2200))))))) (if (= (length V2201) (primitive-arity (hd (tl V2200)))) (append (compile-arg-list V2201) (cons (cons iPrimCall (cons (primitive-id (hd (tl V2200))) ())) ())) (compile1 V2199 (curry-primitive (hd (tl V2200)) V2201)))) ((and (cons? V2200) (and (= $symbol (hd V2200)) (and (cons? (tl V2200)) (= () (tl (tl V2200)))))) (cons (cons iConst (tl V2200)) (cons (cons iGetF ()) (append (compile-arg-list V2201) (apply-or-tail V2199 V2201))))) (true (append (compile1 false V2200) (append (compile-arg-list V2201) (apply-or-tail V2199 V2201))))))

(defun apply-or-tail (V2204 V2205) (cond ((= true V2204) (cons (cons iTailApply (cons (length V2205) ())) ())) ((= false V2204) (cons (cons iApply (cons (length V2205) ())) ())) (true (shen.f_error apply-or-tail))))

(defun compile-arg-list (V2207) (mapcan (compile1 false) V2207))

(defun curry-primitive (V2210 V2211) (let Count (- (primitive-arity V2210) (length V2211)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V2210 ())) (append V2211 PadList))) Pad)))))

(defun rrange (V2213) (rrange0 V2213 0 ()))

(defun rrange0 (V2218 V2219 V2220) (cond ((= V2219 V2218) V2220) (true (rrange0 V2218 (+ V2219 1) (cons V2219 V2220)))))

(defun kl->bytecode (V2222) (append (compile1 true (de-bruijn V2222)) (cons (cons iHalt ()) ())))



