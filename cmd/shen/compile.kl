"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1841 V1842) (cond ((and (cons? V1842) (and (= $symbol (hd V1842)) (and (cons? (tl V1842)) (= () (tl (tl V1842)))))) (cons (cons iConst (tl V1842)) (if V1841 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1842) (and (= $const (hd V1842)) (and (cons? (tl V1842)) (= () (tl (tl V1842)))))) (cons (cons iConst (tl V1842)) (if V1841 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1842) (and (= $var (hd V1842)) (and (cons? (tl V1842)) (= () (tl (tl V1842)))))) (cons (cons iAccess (tl V1842)) (if V1841 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1842) (and (= $if (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (and (cons? (tl (tl (tl V1842)))) (= () (tl (tl (tl (tl V1842)))))))))) (append (compile1 false (hd (tl V1842))) (cons (cons iJF (compile1 V1841 (hd (tl (tl V1842))))) (cons (cons iJMP (compile1 V1841 (hd (tl (tl (tl V1842)))))) ())))) ((and (cons? V1842) (and (= $do (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (= () (tl (tl (tl V1842)))))))) (append (compile1 false (hd (tl V1842))) (cons (cons iPop ()) (compile1 V1841 (hd (tl (tl V1842))))))) ((and (cons? V1842) (and (= $defun (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (= () (tl (tl (tl V1842)))))))) (append (compile1 false (hd (tl (tl V1842)))) (cons (cons iConst (cons (hd (tl V1842)) ())) (cons (cons iDefun ()) (if V1841 (cons (cons iReturn ()) ()) ()))))) ((and (cons? V1842) (and (= $app (hd V1842)) (cons? (tl V1842)))) (compile-apply V1841 (hd (tl V1842)) (tl (tl V1842)))) ((and (cons? V1842) (and (= $abs (hd V1842)) (and (cons? (tl V1842)) (= () (tl (tl V1842)))))) (cons (cons iGrab (append (compile1 V1841 (hd (tl V1842))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V1842) (and (= $freeze (hd V1842)) (and (cons? (tl V1842)) (= () (tl (tl V1842)))))) (cons (cons iFreeze (append (compile1 V1841 (hd (tl V1842))) (cons (cons iReturn ()) ()))) (if V1841 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1842) (and (= $trap (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (= () (tl (tl (tl V1842)))))))) (let JmpX (cons (cons iSetJmp (append (compile1 false (hd (tl V1842))) (cons (cons iClearJmp ()) ()))) ()) (append (compile1 V1841 (hd (tl (tl V1842)))) (append JmpX (if V1841 (cons (cons iReturn ()) ()) ()))))) (true V1842)))

(defun compile-apply (V1846 V1847 V1848) (cond ((and (cons? V1847) (and (= $symbol (hd V1847)) (and (cons? (tl V1847)) (and (= () (tl (tl V1847))) (primitive? (hd (tl V1847))))))) (if (= (length V1848) (primitive-arity (hd (tl V1847)))) (append (compile-arg-list V1848) (cons (cons iPrimCall (cons (primitive-id (hd (tl V1847))) ())) (if V1846 (cons (cons iReturn ()) ()) ()))) (compile1 V1846 (curry-primitive (hd (tl V1847)) V1848)))) ((and (cons? V1847) (and (= $symbol (hd V1847)) (and (cons? (tl V1847)) (= () (tl (tl V1847)))))) (cons (cons iConst (tl V1847)) (cons (cons iGetF ()) (append (compile-arg-list V1848) (apply-or-tail V1846 V1848))))) (true (append (compile1 false V1847) (append (compile-arg-list V1848) (apply-or-tail V1846 V1848))))))

(defun apply-or-tail (V1851 V1852) (cond ((= true V1851) (cons (cons iTailApply (cons (length V1852) ())) ())) ((= false V1851) (cons (cons iApply (cons (length V1852) ())) ())) (true (shen.f_error apply-or-tail))))

(defun compile-arg-list (V1854) (mapcan (compile1 false) V1854))

(defun curry-primitive (V1857 V1858) (let Count (- (primitive-arity V1857) (length V1858)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1857 ())) (append V1858 PadList))) Pad)))))

(defun rrange (V1860) (rrange0 V1860 0 ()))

(defun rrange0 (V1865 V1866 V1867) (cond ((= V1866 V1865) V1867) (true (rrange0 V1865 (+ V1866 1) (cons V1866 V1867)))))

(defun kl->bytecode (V1869) (append (compile1 true (de-bruijn V1869)) (cons (cons iHalt ()) ())))



