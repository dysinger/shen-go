"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V4505) (cond ((and (cons? V4505) (and (= $symbol (hd V4505)) (and (cons? (tl V4505)) (= () (tl (tl V4505)))))) (cons (cons iConst (tl V4505)) ())) ((and (cons? V4505) (and (= $const (hd V4505)) (and (cons? (tl V4505)) (= () (tl (tl V4505)))))) (cons (cons iConst (tl V4505)) ())) ((and (cons? V4505) (and (= $var (hd V4505)) (and (cons? (tl V4505)) (= () (tl (tl V4505)))))) (cons (cons iAccess (tl V4505)) ())) ((and (cons? V4505) (and (= $if (hd V4505)) (and (cons? (tl V4505)) (and (cons? (tl (tl V4505))) (and (cons? (tl (tl (tl V4505)))) (= () (tl (tl (tl (tl V4505)))))))))) (append (compile1 (hd (tl V4505))) (cons (cons iJF (compile1 (hd (tl (tl V4505))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V4505)))))) ())))) ((and (cons? V4505) (and (= $do (hd V4505)) (and (cons? (tl V4505)) (and (cons? (tl (tl V4505))) (= () (tl (tl (tl V4505)))))))) (append (compile1 (hd (tl V4505))) (cons (cons iPop ()) (compile1 (hd (tl (tl V4505))))))) ((and (cons? V4505) (and (= $defun (hd V4505)) (and (cons? (tl V4505)) (and (cons? (tl (tl V4505))) (= () (tl (tl (tl V4505)))))))) (append (compile1 (hd (tl (tl V4505)))) (cons (cons iConst (cons (hd (tl V4505)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V4505) (and (= $app (hd V4505)) (and (cons? (tl V4505)) (and (cons? (hd (tl V4505))) (and (= $symbol (hd (hd (tl V4505)))) (and (cons? (tl (hd (tl V4505)))) (and (= () (tl (tl (hd (tl V4505))))) (primitive? (hd (tl (hd (tl V4505)))))))))))) (compile-primitive-call (hd (tl (hd (tl V4505)))) (tl (tl V4505)))) ((and (cons? V4505) (and (= $app (hd V4505)) (cons? (tl V4505)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V4505)) (tl (tl V4505))) (cons (cons iApply ()) ())))) ((and (cons? V4505) (and (= $abs (hd V4505)) (and (cons? (tl V4505)) (= () (tl (tl V4505)))))) (cons (cons iFreeze (cons (cons iGrab ()) (compile-tail (hd (tl V4505))))) ())) ((and (cons? V4505) (and (= $freeze (hd V4505)) (and (cons? (tl V4505)) (= () (tl (tl V4505)))))) (cons (cons iFreeze (compile-tail (hd (tl V4505)))) ())) ((and (cons? V4505) (and (= $trap (hd V4505)) (and (cons? (tl V4505)) (and (cons? (tl (tl V4505))) (= () (tl (tl (tl V4505)))))))) (append (compile1 (hd (tl (tl V4505)))) (cons (cons iSetJmp (append (compile1 (hd (tl V4505))) (cons (cons iClearJmp ()) ()))) ()))) (true (shen.f_error compile1))))

(defun compile-tail (V4507) (cond ((and (cons? V4507) (and (= $if (hd V4507)) (and (cons? (tl V4507)) (and (cons? (tl (tl V4507))) (and (cons? (tl (tl (tl V4507)))) (= () (tl (tl (tl (tl V4507)))))))))) (append (compile1 (hd (tl V4507))) (cons (cons iJF (compile-tail (hd (tl (tl V4507))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V4507)))))) ())))) ((and (cons? V4507) (and (= $do (hd V4507)) (and (cons? (tl V4507)) (and (cons? (tl (tl V4507))) (= () (tl (tl (tl V4507)))))))) (append (compile1 (hd (tl V4507))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V4507))))))) ((and (cons? V4507) (and (= $abs (hd V4507)) (and (cons? (tl V4507)) (= () (tl (tl V4507)))))) (cons (cons iGrab ()) (compile-tail (hd (tl V4507))))) ((and (cons? V4507) (and (= $app (hd V4507)) (and (cons? (tl V4507)) (and (cons? (hd (tl V4507))) (and (= $symbol (hd (hd (tl V4507)))) (and (cons? (tl (hd (tl V4507)))) (and (= () (tl (tl (hd (tl V4507))))) (primitive? (hd (tl (hd (tl V4507)))))))))))) (append (compile-primitive-call (hd (tl (hd (tl V4507)))) (tl (tl V4507))) (cons (cons iReturn ()) ()))) ((and (cons? V4507) (and (= $app (hd V4507)) (cons? (tl V4507)))) (append (compile-apply (hd (tl V4507)) (tl (tl V4507))) (cons (cons iTailApply ()) ()))) ((and (cons? V4507) (and (= $freeze (hd V4507)) (and (cons? (tl V4507)) (= () (tl (tl V4507)))))) (cons (cons iFreeze (compile-tail (hd (tl V4507)))) ())) (true (append (compile1 V4507) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V4510 V4511) (cond ((= (length V4511) (primitive-arity V4510)) (append (compile-arg-list V4511) (cons (cons iPrimCall (cons (primitive-id V4510) ())) ()))) (true (compile1 (curry-primitive V4510 V4511)))))

(defun compile-apply (V4514 V4515) (append (compile-arg-list (reverse V4515)) (compile-function V4514)))

(defun compile-function (V4517) (cond ((and (cons? V4517) (and (= $symbol (hd V4517)) (and (cons? (tl V4517)) (= () (tl (tl V4517)))))) (cons (cons iConst (tl V4517)) (cons (cons iGetF ()) ()))) (true (compile1 V4517))))

(defun compile-arg-list (V4519) (mapcan (lambda V4503 (compile1 V4503)) V4519))

(defun curry-primitive (V4522 V4523) (let Count (- (primitive-arity V4522) (length V4523)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V4522 ())) (append V4523 PadList))) Pad)))))

(defun rrange (V4525) (rrange0 V4525 0 ()))

(defun rrange0 (V4530 V4531 V4532) (cond ((= V4531 V4530) V4532) (true (rrange0 V4530 (+ V4531 1) (cons V4531 V4532)))))

(defun kl->bytecode (V4534) (append (compile-tail (de-bruijn V4534)) (cons (cons iHalt ()) ())))



