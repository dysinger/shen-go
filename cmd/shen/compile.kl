"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1476 V1477) (cond ((and (cons? V1477) (and (= $symbol (hd V1477)) (and (cons? (tl V1477)) (= () (tl (tl V1477)))))) (cons (cons iConst (tl V1477)) (if V1476 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1477) (and (= $const (hd V1477)) (and (cons? (tl V1477)) (= () (tl (tl V1477)))))) (cons (cons iConst (tl V1477)) (if V1476 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1477) (and (= $var (hd V1477)) (and (cons? (tl V1477)) (= () (tl (tl V1477)))))) (cons (cons iAccess (tl V1477)) (if V1476 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1477) (and (= $if (hd V1477)) (and (cons? (tl V1477)) (and (cons? (tl (tl V1477))) (and (cons? (tl (tl (tl V1477)))) (= () (tl (tl (tl (tl V1477)))))))))) (append (compile1 false (hd (tl V1477))) (cons (cons iJF (compile1 V1476 (hd (tl (tl V1477))))) (cons (cons iJMP (compile1 V1476 (hd (tl (tl (tl V1477)))))) ())))) ((and (cons? V1477) (and (= $do (hd V1477)) (and (cons? (tl V1477)) (and (cons? (tl (tl V1477))) (= () (tl (tl (tl V1477)))))))) (append (compile1 false (hd (tl V1477))) (cons (cons iPop ()) (compile1 V1476 (hd (tl (tl V1477))))))) ((and (cons? V1477) (and (= $defun (hd V1477)) (and (cons? (tl V1477)) (and (cons? (tl (tl V1477))) (= () (tl (tl (tl V1477)))))))) (append (compile1 false (hd (tl (tl V1477)))) (cons (cons iConst (cons (hd (tl V1477)) ())) (cons (cons iDefun ()) (if V1476 (cons (cons iReturn ()) ()) ()))))) ((and (cons? V1477) (and (= $app (hd V1477)) (cons? (tl V1477)))) (compile-apply V1476 (hd (tl V1477)) (tl (tl V1477)))) ((and (cons? V1477) (and (= $abs (hd V1477)) (and (cons? (tl V1477)) (= () (tl (tl V1477)))))) (cons (cons iGrab (append (compile1 V1476 (hd (tl V1477))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V1477) (and (= $freeze (hd V1477)) (and (cons? (tl V1477)) (= () (tl (tl V1477)))))) (cons (cons iFreeze (append (compile1 V1476 (hd (tl V1477))) (cons (cons iReturn ()) ()))) (if V1476 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1477) (and (= $trap (hd V1477)) (and (cons? (tl V1477)) (and (cons? (tl (tl V1477))) (= () (tl (tl (tl V1477)))))))) (let Handler (cons (cons iJMP (append (compile1 V1476 (hd (tl (tl V1477)))) (cons (cons iSwap ()) (cons (cons iPushArg ()) (cons (cons iApply ()) ()))))) ()) (cons (cons iSetJmp (compile1 V1476 (hd (tl V1477)))) Handler))) (true V1477)))

(defun compile-apply (V1481 V1482 V1483) (cond ((and (cons? V1482) (and (= $symbol (hd V1482)) (and (cons? (tl V1482)) (and (= () (tl (tl V1482))) (primitive? (hd (tl V1482))))))) (if (= (length V1483) (primitive-arity (hd (tl V1482)))) (append (mapcan (compile1 false) V1483) (cons (cons iPrimCall (cons (primitive-id (hd (tl V1482))) ())) (if V1481 (cons (cons iReturn ()) ()) ()))) (compile1 V1481 (curry-primitive (hd (tl V1482)) V1483)))) ((and (cons? V1482) (and (= $symbol (hd V1482)) (and (cons? (tl V1482)) (= () (tl (tl V1482)))))) (cons (cons iConst (tl V1482)) (cons (cons iGetF ()) (append (compile-arg-list V1483) (if V1481 (cons (cons iTailApply ()) ()) (cons (cons iApply ()) ())))))) (true (append (compile1 false V1482) (append (compile-arg-list V1483) (if V1481 (cons (cons iTailApply ()) ()) (cons (cons iApply ()) ())))))))

(defun compile-arg-list (V1485) (mapcan (lambda X (append (compile1 false X) (cons (cons iPushArg ()) ()))) V1485))

(defun curry-primitive (V1488 V1489) (let Count (- (primitive-arity V1488) (length V1489)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1488 ())) (append V1489 PadList))) Pad)))))

(defun rrange (V1491) (rrange0 V1491 0 ()))

(defun rrange0 (V1496 V1497 V1498) (cond ((= V1497 V1496) V1498) (true (rrange0 V1496 (+ V1497 1) (cons V1497 V1498)))))

(defun kl->bytecode (V1500) (append (compile1 true (de-bruijn V1500)) (cons (cons iHalt ()) ())))



