"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1483) (cond ((and (cons? V1483) (and (= $symbol (hd V1483)) (and (cons? (tl V1483)) (= () (tl (tl V1483)))))) (cons (cons iConst (tl V1483)) ())) ((and (cons? V1483) (and (= $const (hd V1483)) (and (cons? (tl V1483)) (= () (tl (tl V1483)))))) (cons (cons iConst (tl V1483)) ())) ((and (cons? V1483) (and (= $var (hd V1483)) (and (cons? (tl V1483)) (= () (tl (tl V1483)))))) (cons (cons iAccess (tl V1483)) ())) ((and (cons? V1483) (and (= $if (hd V1483)) (and (cons? (tl V1483)) (and (cons? (tl (tl V1483))) (and (cons? (tl (tl (tl V1483)))) (= () (tl (tl (tl (tl V1483)))))))))) (append (compile1 (hd (tl V1483))) (cons (cons iJF (compile1 (hd (tl (tl V1483))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V1483)))))) ())))) ((and (cons? V1483) (and (= $do (hd V1483)) (and (cons? (tl V1483)) (and (cons? (tl (tl V1483))) (= () (tl (tl (tl V1483)))))))) (append (compile1 (hd (tl V1483))) (cons (cons iPop ()) (compile1 (hd (tl (tl V1483))))))) ((and (cons? V1483) (and (= $defun (hd V1483)) (and (cons? (tl V1483)) (and (cons? (tl (tl V1483))) (= () (tl (tl (tl V1483)))))))) (append (compile1 (hd (tl (tl V1483)))) (cons (cons iConst (cons (hd (tl V1483)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V1483) (and (= $app (hd V1483)) (and (cons? (tl V1483)) (and (cons? (hd (tl V1483))) (and (= $symbol (hd (hd (tl V1483)))) (and (cons? (tl (hd (tl V1483)))) (and (= () (tl (tl (hd (tl V1483))))) (primitive? (hd (tl (hd (tl V1483)))))))))))) (compile-primitive-call (hd (tl (hd (tl V1483)))) (tl (tl V1483)))) ((and (cons? V1483) (and (= $app (hd V1483)) (cons? (tl V1483)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V1483)) (tl (tl V1483))) (cons (cons iApply ()) ())))) ((and (cons? V1483) (and (= $abs (hd V1483)) (and (cons? (tl V1483)) (= () (tl (tl V1483)))))) (cons (cons iFreeze (cons (cons iGrab ()) (compile-tail (hd (tl V1483))))) ())) ((and (cons? V1483) (and (= $freeze (hd V1483)) (and (cons? (tl V1483)) (= () (tl (tl V1483)))))) (cons (cons iFreeze (compile-tail (hd (tl V1483)))) ())) ((and (cons? V1483) (and (= $trap (hd V1483)) (and (cons? (tl V1483)) (and (cons? (tl (tl V1483))) (= () (tl (tl (tl V1483)))))))) (append (compile1 (hd (tl (tl V1483)))) (cons (cons iSetJmp (append (compile1 (hd (tl V1483))) (cons (cons iClearJmp ()) ()))) ()))) (true (shen.f_error compile1))))

(defun compile-tail (V1485) (cond ((and (cons? V1485) (and (= $if (hd V1485)) (and (cons? (tl V1485)) (and (cons? (tl (tl V1485))) (and (cons? (tl (tl (tl V1485)))) (= () (tl (tl (tl (tl V1485)))))))))) (append (compile1 (hd (tl V1485))) (cons (cons iJF (compile-tail (hd (tl (tl V1485))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V1485)))))) ())))) ((and (cons? V1485) (and (= $do (hd V1485)) (and (cons? (tl V1485)) (and (cons? (tl (tl V1485))) (= () (tl (tl (tl V1485)))))))) (append (compile1 (hd (tl V1485))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V1485))))))) ((and (cons? V1485) (and (= $abs (hd V1485)) (and (cons? (tl V1485)) (= () (tl (tl V1485)))))) (cons (cons iGrab ()) (compile-tail (hd (tl V1485))))) ((and (cons? V1485) (and (= $app (hd V1485)) (and (cons? (tl V1485)) (and (cons? (hd (tl V1485))) (and (= $symbol (hd (hd (tl V1485)))) (and (cons? (tl (hd (tl V1485)))) (and (= () (tl (tl (hd (tl V1485))))) (primitive? (hd (tl (hd (tl V1485)))))))))))) (append (compile-primitive-call (hd (tl (hd (tl V1485)))) (tl (tl V1485))) (cons (cons iReturn ()) ()))) ((and (cons? V1485) (and (= $app (hd V1485)) (cons? (tl V1485)))) (append (compile-apply (hd (tl V1485)) (tl (tl V1485))) (cons (cons iTailApply ()) ()))) (true (append (compile1 V1485) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V1488 V1489) (cond ((= (length V1489) (primitive-arity V1488)) (append (compile-arg-list V1489) (cons (cons iPrimCall (cons (primitive-id V1488) ())) ()))) (true (compile1 (curry-primitive V1488 V1489)))))

(defun compile-apply (V1492 V1493) (append (compile-arg-list (reverse V1493)) (compile-function V1492)))

(defun compile-function (V1495) (cond ((and (cons? V1495) (and (= $symbol (hd V1495)) (and (cons? (tl V1495)) (= () (tl (tl V1495)))))) (cons (cons iConst (tl V1495)) (cons (cons iGetF ()) ()))) (true (compile1 V1495))))

(defun compile-arg-list (V1497) (mapcan (lambda V1481 (compile1 V1481)) V1497))

(defun curry-primitive (V1500 V1501) (let Count (- (primitive-arity V1500) (length V1501)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1500 ())) (append V1501 PadList))) Pad)))))

(defun rrange (V1503) (rrange0 V1503 0 ()))

(defun rrange0 (V1508 V1509 V1510) (cond ((= V1509 V1508) V1510) (true (rrange0 V1508 (+ V1509 1) (cons V1509 V1510)))))

(defun kl->bytecode (V1512) (append (compile-tail (de-bruijn V1512)) (cons (cons iHalt ()) ())))



