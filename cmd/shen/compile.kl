"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V4249) (cond ((and (cons? V4249) (and (= $symbol (hd V4249)) (and (cons? (tl V4249)) (= () (tl (tl V4249)))))) (cons (cons iConst (tl V4249)) ())) ((and (cons? V4249) (and (= $const (hd V4249)) (and (cons? (tl V4249)) (= () (tl (tl V4249)))))) (cons (cons iConst (tl V4249)) ())) ((and (cons? V4249) (and (= $var (hd V4249)) (and (cons? (tl V4249)) (= () (tl (tl V4249)))))) (cons (cons iAccess (tl V4249)) ())) ((and (cons? V4249) (and (= $if (hd V4249)) (and (cons? (tl V4249)) (and (cons? (tl (tl V4249))) (and (cons? (tl (tl (tl V4249)))) (= () (tl (tl (tl (tl V4249)))))))))) (append (compile1 (hd (tl V4249))) (cons (cons iJF (compile1 (hd (tl (tl V4249))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V4249)))))) ())))) ((and (cons? V4249) (and (= $do (hd V4249)) (and (cons? (tl V4249)) (and (cons? (tl (tl V4249))) (= () (tl (tl (tl V4249)))))))) (append (compile1 (hd (tl V4249))) (cons (cons iPop ()) (compile1 (hd (tl (tl V4249))))))) ((and (cons? V4249) (and (= $defun (hd V4249)) (and (cons? (tl V4249)) (and (cons? (tl (tl V4249))) (= () (tl (tl (tl V4249)))))))) (append (compile1 (hd (tl (tl V4249)))) (cons (cons iConst (cons (hd (tl V4249)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V4249) (and (= $app (hd V4249)) (cons? (tl V4249)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V4249)) (tl (tl V4249))) (cons (cons iApply ()) ())))) ((and (cons? V4249) (and (= $abs (hd V4249)) (and (cons? (tl V4249)) (= () (tl (tl V4249)))))) (cons (cons iFreeze (compile-tail V4249)) ())) ((and (cons? V4249) (and (= $freeze (hd V4249)) (and (cons? (tl V4249)) (= () (tl (tl V4249)))))) (cons (cons iFreeze (compile-tail (hd (tl V4249)))) ())) ((and (cons? V4249) (and (= $trap (hd V4249)) (and (cons? (tl V4249)) (and (cons? (tl (tl V4249))) (= () (tl (tl (tl V4249)))))))) (cons (cons iFreeze (compile1 (hd (tl (tl V4249))))) (cons (cons iSetJmp (append (compile1 (hd (tl V4249))) (cons (cons iClearJmp ()) ()))) ()))) (true V4249)))

(defun compile-tail (V4251) (cond ((and (cons? V4251) (and (= $if (hd V4251)) (and (cons? (tl V4251)) (and (cons? (tl (tl V4251))) (and (cons? (tl (tl (tl V4251)))) (= () (tl (tl (tl (tl V4251)))))))))) (append (compile1 (hd (tl V4251))) (cons (cons iJF (compile-tail (hd (tl (tl V4251))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V4251)))))) ())))) ((and (cons? V4251) (and (= $do (hd V4251)) (and (cons? (tl V4251)) (and (cons? (tl (tl V4251))) (= () (tl (tl (tl V4251)))))))) (append (compile1 (hd (tl V4251))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V4251))))))) ((and (cons? V4251) (and (= $defun (hd V4251)) (and (cons? (tl V4251)) (and (cons? (tl (tl V4251))) (= () (tl (tl (tl V4251)))))))) (append (compile1 (hd (tl (tl V4251)))) (cons (cons iConst (cons (hd (tl V4251)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V4251) (and (= $abs (hd V4251)) (and (cons? (tl V4251)) (= () (tl (tl V4251)))))) (cons (cons iGrab (compile-tail (hd (tl V4251)))) ())) ((and (cons? V4251) (and (= $app (hd V4251)) (and (cons? (tl V4251)) (and (cons? (hd (tl V4251))) (and (= $symbol (hd (hd (tl V4251)))) (and (cons? (tl (hd (tl V4251)))) (and (= () (tl (tl (hd (tl V4251))))) (primitive? (hd (tl (hd (tl V4251)))))))))))) (append (compile-primitive-call (hd (tl (hd (tl V4251)))) (tl (tl V4251))) (cons (cons iReturn ()) ()))) ((and (cons? V4251) (and (= $app (hd V4251)) (cons? (tl V4251)))) (append (compile-apply (hd (tl V4251)) (tl (tl V4251))) (cons (cons iTailApply ()) ()))) ((and (cons? V4251) (and (= $freeze (hd V4251)) (and (cons? (tl V4251)) (= () (tl (tl V4251)))))) (cons (cons iFreeze (compile-tail (hd (tl V4251)))) ())) ((and (cons? V4251) (and (= $trap (hd V4251)) (and (cons? (tl V4251)) (and (cons? (tl (tl V4251))) (= () (tl (tl (tl V4251)))))))) (cons (cons iFreeze (compile-tail (hd (tl (tl V4251))))) (cons (cons iSetJmp (append (compile1 (hd (tl V4251))) (cons (cons iClearJmp ()) ()))) ()))) (true (append (compile1 V4251) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V4254 V4255) (cond ((= (length V4255) (primitive-arity V4254)) (append (compile-arg-list V4255) (cons (cons iPrimCall (cons (primitive-id V4254) ())) ()))) (true (compile1 (curry-primitive V4254 V4255)))))

(defun compile-apply (V4258 V4259) (append (compile-arg-list (reverse V4259)) (compile-function V4258)))

(defun compile-function (V4261) (cond ((and (cons? V4261) (and (= $symbol (hd V4261)) (and (cons? (tl V4261)) (= () (tl (tl V4261)))))) (cons (cons iConst (tl V4261)) (cons (cons iGetF ()) ()))) (true (compile1 V4261))))

(defun compile-arg-list (V4263) (mapcan (lambda V4247 (compile1 V4247)) V4263))

(defun curry-primitive (V4266 V4267) (let Count (- (primitive-arity V4266) (length V4267)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V4266 ())) (append V4267 PadList))) Pad)))))

(defun rrange (V4269) (rrange0 V4269 0 ()))

(defun rrange0 (V4274 V4275 V4276) (cond ((= V4275 V4274) V4276) (true (rrange0 V4274 (+ V4275 1) (cons V4275 V4276)))))

(defun kl->bytecode (V4278) (append (compile-tail (de-bruijn V4278)) (cons (cons iHalt ()) ())))



