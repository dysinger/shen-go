"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1627 V1628) (cond ((and (cons? V1628) (and (= $symbol (hd V1628)) (and (cons? (tl V1628)) (= () (tl (tl V1628)))))) (cons (cons iConst (tl V1628)) (if V1627 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1628) (and (= $const (hd V1628)) (and (cons? (tl V1628)) (= () (tl (tl V1628)))))) (cons (cons iConst (tl V1628)) (if V1627 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1628) (and (= $var (hd V1628)) (and (cons? (tl V1628)) (= () (tl (tl V1628)))))) (cons (cons iAccess (tl V1628)) (if V1627 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1628) (and (= $if (hd V1628)) (and (cons? (tl V1628)) (and (cons? (tl (tl V1628))) (and (cons? (tl (tl (tl V1628)))) (= () (tl (tl (tl (tl V1628)))))))))) (append (compile1 false (hd (tl V1628))) (cons (cons iJF (compile1 V1627 (hd (tl (tl V1628))))) (cons (cons iJMP (compile1 V1627 (hd (tl (tl (tl V1628)))))) ())))) ((and (cons? V1628) (and (= $do (hd V1628)) (and (cons? (tl V1628)) (and (cons? (tl (tl V1628))) (= () (tl (tl (tl V1628)))))))) (append (compile1 false (hd (tl V1628))) (cons (cons iPop ()) (compile1 V1627 (hd (tl (tl V1628))))))) ((and (cons? V1628) (and (= $defun (hd V1628)) (and (cons? (tl V1628)) (and (cons? (tl (tl V1628))) (= () (tl (tl (tl V1628)))))))) (append (compile1 false (hd (tl (tl V1628)))) (cons (cons iConst (cons (hd (tl V1628)) ())) (cons (cons iDefun ()) (if V1627 (cons (cons iReturn ()) ()) ()))))) ((and (cons? V1628) (and (= $app (hd V1628)) (cons? (tl V1628)))) (compile-apply V1627 (hd (tl V1628)) (tl (tl V1628)))) ((and (cons? V1628) (and (= $abs (hd V1628)) (and (cons? (tl V1628)) (= () (tl (tl V1628)))))) (cons (cons iGrab (append (compile1 V1627 (hd (tl V1628))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V1628) (and (= $freeze (hd V1628)) (and (cons? (tl V1628)) (= () (tl (tl V1628)))))) (cons (cons iFreeze (append (compile1 V1627 (hd (tl V1628))) (cons (cons iReturn ()) ()))) (if V1627 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1628) (and (= $trap (hd V1628)) (and (cons? (tl V1628)) (and (cons? (tl (tl V1628))) (= () (tl (tl (tl V1628)))))))) (let Handler (cons (cons iJMP (append (compile1 V1627 (hd (tl (tl V1628)))) (cons (cons iSwap ()) (cons (cons iPushArg ()) (cons (cons iApply ()) ()))))) ()) (cons (cons iSetJmp (compile1 V1627 (hd (tl V1628)))) Handler))) (true V1628)))

(defun compile-apply (V1632 V1633 V1634) (cond ((and (cons? V1633) (and (= $symbol (hd V1633)) (and (cons? (tl V1633)) (and (= () (tl (tl V1633))) (primitive? (hd (tl V1633))))))) (if (= (length V1634) (primitive-arity (hd (tl V1633)))) (append (compile-arg-list V1634) (cons (cons iPrimCall (cons (primitive-id (hd (tl V1633))) ())) (if V1632 (cons (cons iReturn ()) ()) ()))) (compile1 V1632 (curry-primitive (hd (tl V1633)) V1634)))) ((and (cons? V1633) (and (= $symbol (hd V1633)) (and (cons? (tl V1633)) (= () (tl (tl V1633)))))) (cons (cons iConst (tl V1633)) (cons (cons iGetF ()) (append (compile-arg-list V1634) (apply-or-tail V1632 V1634))))) (true (append (compile1 false V1633) (append (compile-arg-list V1634) (apply-or-tail V1632 V1634))))))

(defun apply-or-tail (V1637 V1638) (cond ((= true V1637) (cons (cons iTailApply (cons (length V1638) ())) ())) ((= false V1637) (cons (cons iApply (cons (length V1638) ())) ())) (true (shen.f_error apply-or-tail))))

(defun compile-arg-list (V1640) (mapcan (compile1 false) V1640))

(defun curry-primitive (V1643 V1644) (let Count (- (primitive-arity V1643) (length V1644)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1643 ())) (append V1644 PadList))) Pad)))))

(defun rrange (V1646) (rrange0 V1646 0 ()))

(defun rrange0 (V1651 V1652 V1653) (cond ((= V1652 V1651) V1653) (true (rrange0 V1651 (+ V1652 1) (cons V1652 V1653)))))

(defun kl->bytecode (V1655) (append (compile1 true (de-bruijn V1655)) (cons (cons iHalt ()) ())))



