"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1486 V1487) (cond ((and (cons? V1487) (and (= $symbol (hd V1487)) (and (cons? (tl V1487)) (= () (tl (tl V1487)))))) (cons (cons iConst (tl V1487)) (if V1486 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1487) (and (= $const (hd V1487)) (and (cons? (tl V1487)) (= () (tl (tl V1487)))))) (cons (cons iConst (tl V1487)) (if V1486 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1487) (and (= $var (hd V1487)) (and (cons? (tl V1487)) (= () (tl (tl V1487)))))) (cons (cons iAccess (tl V1487)) (if V1486 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1487) (and (= $if (hd V1487)) (and (cons? (tl V1487)) (and (cons? (tl (tl V1487))) (and (cons? (tl (tl (tl V1487)))) (= () (tl (tl (tl (tl V1487)))))))))) (append (compile1 false (hd (tl V1487))) (cons (cons iJF (compile1 V1486 (hd (tl (tl V1487))))) (cons (cons iJMP (compile1 V1486 (hd (tl (tl (tl V1487)))))) ())))) ((and (cons? V1487) (and (= $do (hd V1487)) (and (cons? (tl V1487)) (and (cons? (tl (tl V1487))) (= () (tl (tl (tl V1487)))))))) (append (compile1 false (hd (tl V1487))) (cons (cons iPop ()) (compile1 V1486 (hd (tl (tl V1487))))))) ((and (cons? V1487) (and (= $defun (hd V1487)) (and (cons? (tl V1487)) (and (cons? (tl (tl V1487))) (= () (tl (tl (tl V1487)))))))) (append (compile1 false (hd (tl (tl V1487)))) (cons (cons iConst (cons (hd (tl V1487)) ())) (cons (cons iDefun ()) (if V1486 (cons (cons iReturn ()) ()) ()))))) ((and (cons? V1487) (and (= $app (hd V1487)) (cons? (tl V1487)))) (compile-apply V1486 (hd (tl V1487)) (tl (tl V1487)))) ((and (cons? V1487) (and (= $abs (hd V1487)) (and (cons? (tl V1487)) (= () (tl (tl V1487)))))) (cons (cons iGrab (append (compile1 V1486 (hd (tl V1487))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V1487) (and (= $freeze (hd V1487)) (and (cons? (tl V1487)) (= () (tl (tl V1487)))))) (cons (cons iFreeze (append (compile1 V1486 (hd (tl V1487))) (cons (cons iReturn ()) ()))) (if V1486 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1487) (and (= $trap (hd V1487)) (and (cons? (tl V1487)) (and (cons? (tl (tl V1487))) (= () (tl (tl (tl V1487)))))))) (let Handler (cons (cons iJMP (append (compile1 V1486 (hd (tl (tl V1487)))) (cons (cons iSwap ()) (cons (cons iApply (cons 1 ())) ())))) ()) (cons (cons iSetJmp (compile1 V1486 (hd (tl V1487)))) Handler))) (true V1487)))

(defun compile-apply (V1491 V1492 V1493) (cond ((and (cons? V1492) (and (= $symbol (hd V1492)) (and (cons? (tl V1492)) (and (= () (tl (tl V1492))) (primitive? (hd (tl V1492))))))) (if (= (length V1493) (primitive-arity (hd (tl V1492)))) (append (compile-arg-list V1493) (cons (cons iPrimCall (cons (primitive-id (hd (tl V1492))) ())) (if V1491 (cons (cons iReturn ()) ()) ()))) (compile1 V1491 (curry-primitive (hd (tl V1492)) V1493)))) ((and (cons? V1492) (and (= $symbol (hd V1492)) (and (cons? (tl V1492)) (= () (tl (tl V1492)))))) (cons (cons iConst (tl V1492)) (cons (cons iGetF ()) (append (compile-arg-list V1493) (apply-or-tail V1491 V1493))))) (true (append (compile1 false V1492) (append (compile-arg-list V1493) (apply-or-tail V1491 V1493))))))

(defun apply-or-tail (V1496 V1497) (cond ((= true V1496) (cons (cons iTailApply (cons (length V1497) ())) ())) ((= false V1496) (cons (cons iApply (cons (length V1497) ())) ())) (true (shen.f_error apply-or-tail))))

(defun compile-arg-list (V1499) (mapcan (compile1 false) V1499))

(defun curry-primitive (V1502 V1503) (let Count (- (primitive-arity V1502) (length V1503)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1502 ())) (append V1503 PadList))) Pad)))))

(defun rrange (V1505) (rrange0 V1505 0 ()))

(defun rrange0 (V1510 V1511 V1512) (cond ((= V1511 V1510) V1512) (true (rrange0 V1510 (+ V1511 1) (cons V1511 V1512)))))

(defun kl->bytecode (V1514) (append (compile1 true (de-bruijn V1514)) (cons (cons iHalt ()) ())))



