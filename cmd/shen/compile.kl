"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1650) (cond ((and (cons? V1650) (and (= $symbol (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iConst (tl V1650)) ())) ((and (cons? V1650) (and (= $const (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iConst (tl V1650)) ())) ((and (cons? V1650) (and (= $var (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iAccess (tl V1650)) ())) ((and (cons? V1650) (and (= $if (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (and (cons? (tl (tl (tl V1650)))) (= () (tl (tl (tl (tl V1650)))))))))) (append (compile1 (hd (tl V1650))) (cons (cons iJF (compile1 (hd (tl (tl V1650))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V1650)))))) ())))) ((and (cons? V1650) (and (= $do (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650)))))))) (append (compile1 (hd (tl V1650))) (cons (cons iPop ()) (compile1 (hd (tl (tl V1650))))))) ((and (cons? V1650) (and (= $defun (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650)))))))) (append (compile1 (hd (tl (tl V1650)))) (cons (cons iConst (cons (hd (tl V1650)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V1650) (and (= $prim (hd V1650)) (cons? (tl V1650)))) (compile-primitive-call (hd (tl V1650)) (tl (tl V1650)))) ((and (cons? V1650) (and (= $app (hd V1650)) (cons? (tl V1650)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V1650)) (tl (tl V1650))) (cons (cons iApply ()) ())))) ((and (cons? V1650) (and (= $abs (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iFreeze (cons (cons iGrab ()) (compile-tail (hd (tl V1650))))) ())) ((and (cons? V1650) (and (= $freeze (hd V1650)) (and (cons? (tl V1650)) (= () (tl (tl V1650)))))) (cons (cons iFreeze (compile-tail (hd (tl V1650)))) ())) ((and (cons? V1650) (and (= $trap (hd V1650)) (and (cons? (tl V1650)) (and (cons? (tl (tl V1650))) (= () (tl (tl (tl V1650)))))))) (append (compile1 (hd (tl (tl V1650)))) (cons (cons iSetJmp (append (compile1 (hd (tl V1650))) (cons (cons iClearJmp ()) ()))) ()))) (true (shen.f_error compile1))))

(defun compile-tail (V1652) (cond ((and (cons? V1652) (and (= $if (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (and (cons? (tl (tl (tl V1652)))) (= () (tl (tl (tl (tl V1652)))))))))) (append (compile1 (hd (tl V1652))) (cons (cons iJF (compile-tail (hd (tl (tl V1652))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V1652)))))) ())))) ((and (cons? V1652) (and (= $do (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (= () (tl (tl (tl V1652)))))))) (append (compile1 (hd (tl V1652))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V1652))))))) ((and (cons? V1652) (and (= $abs (hd V1652)) (and (cons? (tl V1652)) (= () (tl (tl V1652)))))) (cons (cons iGrab ()) (compile-tail (hd (tl V1652))))) ((and (cons? V1652) (and (= $app (hd V1652)) (cons? (tl V1652)))) (append (compile-apply (hd (tl V1652)) (tl (tl V1652))) (cons (cons iTailApply ()) ()))) (true (append (compile1 V1652) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V1655 V1656) (cond ((= native V1655) (append (compile-arg-list V1656) (cons (cons iNativeCall (cons (length V1656) ())) ()))) ((= (length V1656) (primitive-arity V1655)) (append (compile-arg-list V1656) (cons (cons iPrimCall (cons (primitive-id V1655) ())) ()))) (true (compile1 (curry-primitive V1655 V1656)))))

(defun compile-apply (V1659 V1660) (append (compile-arg-list (reverse V1660)) (compile-function V1659)))

(defun compile-function (V1662) (cond ((and (cons? V1662) (and (= $symbol (hd V1662)) (and (cons? (tl V1662)) (= () (tl (tl V1662)))))) (cons (cons iConst (tl V1662)) (cons (cons iGetF ()) ()))) (true (compile1 V1662))))

(defun compile-arg-list (V1664) (mapcan (lambda V1648 (compile1 V1648)) V1664))

(defun curry-primitive (V1667 V1668) (let Count (- (primitive-arity V1667) (length V1668)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $prim (cons V1667 (append V1668 PadList))) Pad)))))

(defun rrange (V1670) (rrange0 V1670 0 ()))

(defun rrange0 (V1675 V1676 V1677) (cond ((= V1676 V1675) V1677) (true (rrange0 V1675 (+ V1676 1) (cons V1676 V1677)))))

(defun kl->bytecode (V1679) (append (compile-tail (de-bruijn V1679)) (cons (cons iHalt ()) ())))



