"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V1369 V1370) (cond ((and (cons? V1370) (and (= $symbol (hd V1370)) (and (cons? (tl V1370)) (= () (tl (tl V1370)))))) (cons (cons iConst (tl V1370)) (if V1369 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1370) (and (= $const (hd V1370)) (and (cons? (tl V1370)) (= () (tl (tl V1370)))))) (cons (cons iConst (tl V1370)) (if V1369 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1370) (and (= $var (hd V1370)) (and (cons? (tl V1370)) (= () (tl (tl V1370)))))) (cons (cons iAccess (tl V1370)) (if V1369 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1370) (and (= $if (hd V1370)) (and (cons? (tl V1370)) (and (cons? (tl (tl V1370))) (and (cons? (tl (tl (tl V1370)))) (= () (tl (tl (tl (tl V1370)))))))))) (append (compile1 false (hd (tl V1370))) (cons (cons iJF (compile1 V1369 (hd (tl (tl V1370))))) (cons (cons iJMP (compile1 V1369 (hd (tl (tl (tl V1370)))))) ())))) ((and (cons? V1370) (and (= $do (hd V1370)) (and (cons? (tl V1370)) (and (cons? (tl (tl V1370))) (= () (tl (tl (tl V1370)))))))) (append (compile1 false (hd (tl V1370))) (cons (cons iPop ()) (compile1 V1369 (hd (tl (tl V1370))))))) ((and (cons? V1370) (and (= $defun (hd V1370)) (and (cons? (tl V1370)) (and (cons? (tl (tl V1370))) (= () (tl (tl (tl V1370)))))))) (append (compile1 V1369 (hd (tl (tl V1370)))) (cons (cons iConst (cons (hd (tl V1370)) ())) (cons (cons iDefun ()) (if V1369 (cons (cons iReturn ()) ()) ()))))) ((and (cons? V1370) (and (= $app (hd V1370)) (cons? (tl V1370)))) (compile-apply V1369 (hd (tl V1370)) (tl (tl V1370)))) ((and (cons? V1370) (and (= $abs (hd V1370)) (and (cons? (tl V1370)) (= () (tl (tl V1370)))))) (cons (cons iGrab (append (compile1 V1369 (hd (tl V1370))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V1370) (and (= $freeze (hd V1370)) (and (cons? (tl V1370)) (= () (tl (tl V1370)))))) (cons (cons iFreeze (append (compile1 V1369 (hd (tl V1370))) (cons (cons iReturn ()) ()))) (if V1369 (cons (cons iReturn ()) ()) ()))) ((and (cons? V1370) (and (= $trap (hd V1370)) (and (cons? (tl V1370)) (and (cons? (tl (tl V1370))) (= () (tl (tl (tl V1370)))))))) (let Handler (cons (cons iJMP (append (compile1 V1369 (hd (tl (tl V1370)))) (cons (cons iSwap ()) (cons (cons iPushArg ()) (cons (cons iApply ()) ()))))) ()) (cons (cons iSetJmp (compile1 V1369 (hd (tl V1370)))) Handler))) (true V1370)))

(defun compile-apply (V1374 V1375 V1376) (cond ((and (cons? V1375) (and (= $symbol (hd V1375)) (and (cons? (tl V1375)) (and (= () (tl (tl V1375))) (primitive? (hd (tl V1375))))))) (if (= (length V1376) (primitive-arity (hd (tl V1375)))) (append (mapcan (compile1 false) V1376) (cons (cons iPrimCall (cons (primitive-id (hd (tl V1375))) ())) (if V1374 (cons (cons iReturn ()) ()) ()))) (compile1 V1374 (curry-primitive (hd (tl V1375)) V1376)))) ((and (cons? V1375) (and (= $symbol (hd V1375)) (and (cons? (tl V1375)) (= () (tl (tl V1375)))))) (cons (cons iConst (tl V1375)) (cons (cons iGetF ()) (append (compile-arg-list V1376) (if V1374 (cons (cons iTailApply ()) ()) (cons (cons iApply ()) ())))))) (true (append (compile1 false V1375) (append (compile-arg-list V1376) (if V1374 (cons (cons iTailApply ()) ()) (cons (cons iApply ()) ())))))))

(defun compile-arg-list (V1378) (mapcan (lambda X (append (compile1 false X) (cons (cons iPushArg ()) ()))) V1378))

(defun curry-primitive (V1381 V1382) (let Count (- (primitive-arity V1381) (length V1382)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V1381 ())) (append V1382 PadList))) Pad)))))

(defun rrange (V1384) (rrange0 V1384 0 ()))

(defun rrange0 (V1389 V1390 V1391) (cond ((= V1390 V1389) V1391) (true (rrange0 V1389 (+ V1390 1) (cons V1390 V1391)))))

(defun kl->bytecode (V1393) (append (compile1 true (de-bruijn V1393)) (cons (cons iHalt ()) ())))



