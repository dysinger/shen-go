"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V3734 V3735) (cond ((and (cons? V3735) (and (= $symbol (hd V3735)) (and (cons? (tl V3735)) (= () (tl (tl V3735)))))) (cons (cons iConst (tl V3735)) ())) ((and (cons? V3735) (and (= $const (hd V3735)) (and (cons? (tl V3735)) (= () (tl (tl V3735)))))) (cons (cons iConst (tl V3735)) ())) ((and (cons? V3735) (and (= $var (hd V3735)) (and (cons? (tl V3735)) (= () (tl (tl V3735)))))) (cons (cons iAccess (tl V3735)) ())) ((and (cons? V3735) (and (= $if (hd V3735)) (and (cons? (tl V3735)) (and (cons? (tl (tl V3735))) (and (cons? (tl (tl (tl V3735)))) (= () (tl (tl (tl (tl V3735)))))))))) (append (compile1 false (hd (tl V3735))) (cons (cons iJF (compile1 V3734 (hd (tl (tl V3735))))) (cons (cons iJMP (compile1 V3734 (hd (tl (tl (tl V3735)))))) ())))) ((and (cons? V3735) (and (= $do (hd V3735)) (and (cons? (tl V3735)) (and (cons? (tl (tl V3735))) (= () (tl (tl (tl V3735)))))))) (append (compile1 false (hd (tl V3735))) (cons (cons iPop ()) (compile1 V3734 (hd (tl (tl V3735))))))) ((and (cons? V3735) (and (= $defun (hd V3735)) (and (cons? (tl V3735)) (and (cons? (tl (tl V3735))) (= () (tl (tl (tl V3735)))))))) (append (compile1 V3734 (hd (tl (tl V3735)))) (cons (cons iConst (cons (hd (tl V3735)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V3735) (and (= $app (hd V3735)) (cons? (tl V3735)))) (compile-apply V3734 (hd (tl V3735)) (tl (tl V3735)))) ((and (cons? V3735) (and (= $abs (hd V3735)) (and (cons? (tl V3735)) (= () (tl (tl V3735)))))) (cons (cons iGrab (append (compile1 V3734 (hd (tl V3735))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V3735) (and (= $freeze (hd V3735)) (and (cons? (tl V3735)) (= () (tl (tl V3735)))))) (cons (cons iFreeze (append (compile1 V3734 (hd (tl V3735))) (cons (cons iReturn ()) ()))) ())) ((and (cons? V3735) (and (= $trap (hd V3735)) (and (cons? (tl V3735)) (and (cons? (tl (tl V3735))) (= () (tl (tl (tl V3735)))))))) (cons (cons iFreeze (compile1 V3734 (hd (tl (tl V3735))))) (cons (cons iSetJmp (append (compile1 false (hd (tl V3735))) (cons (cons iClearJmp ()) ()))) ()))) (true V3735)))

(defun compile-apply (V3739 V3740 V3741) (cond ((and (cons? V3740) (and (= $symbol (hd V3740)) (and (cons? (tl V3740)) (and (= () (tl (tl V3740))) (primitive? (hd (tl V3740))))))) (if (= (length V3741) (primitive-arity (hd (tl V3740)))) (append (compile-arg-list V3741) (cons (cons iPrimCall (cons (primitive-id (hd (tl V3740))) ())) ())) (compile1 V3739 (curry-primitive (hd (tl V3740)) V3741)))) (true (let Body (compile-apply-common V3739 V3740 V3741) (let NeedApply (if V3739 (cons (cons iTailApply ()) ()) (cons (cons iApply ()) ())) (let Body1 (append-apply V3740 Body NeedApply) (let Body2 (add-imark V3739 Body1) Body2)))))))

(defun compile-apply-common (V3745 V3746 V3747) (append (compile-arg-list (reverse V3747)) (compile-function V3745 V3746)))

(defun compile-function (V3752 V3753) (cond ((and (cons? V3753) (and (= $symbol (hd V3753)) (and (cons? (tl V3753)) (= () (tl (tl V3753)))))) (cons (cons iConst (tl V3753)) (cons (cons iGetF ()) ()))) (true (compile1 false V3753))))

(defun add-imark (V3756 V3757) (cond ((= false V3756) (cons (cons iMark ()) V3757)) ((= true V3756) V3757) (true (shen.f_error add-imark))))

(defun append-apply (V3769 V3770 V3771) (cond ((and (cons? V3769) (= $freeze (hd V3769))) (append V3770 V3771)) ((and (cons? V3769) (= $symbol (hd V3769))) (append V3770 V3771)) (true V3770)))

(defun compile-arg-list (V3773) (mapcan (compile1 false) V3773))

(defun curry-primitive (V3776 V3777) (let Count (- (primitive-arity V3776) (length V3777)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V3776 ())) (append V3777 PadList))) Pad)))))

(defun rrange (V3779) (rrange0 V3779 0 ()))

(defun rrange0 (V3784 V3785 V3786) (cond ((= V3785 V3784) V3786) (true (rrange0 V3784 (+ V3785 1) (cons V3785 V3786)))))

(defun kl->bytecode (V3788) (append (compile1 true (de-bruijn V3788)) (cons (cons iHalt ()) ())))



