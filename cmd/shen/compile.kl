"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun compile1 (V4473) (cond ((and (cons? V4473) (and (= $symbol (hd V4473)) (and (cons? (tl V4473)) (= () (tl (tl V4473)))))) (cons (cons iConst (tl V4473)) ())) ((and (cons? V4473) (and (= $const (hd V4473)) (and (cons? (tl V4473)) (= () (tl (tl V4473)))))) (cons (cons iConst (tl V4473)) ())) ((and (cons? V4473) (and (= $var (hd V4473)) (and (cons? (tl V4473)) (= () (tl (tl V4473)))))) (cons (cons iAccess (tl V4473)) ())) ((and (cons? V4473) (and (= $if (hd V4473)) (and (cons? (tl V4473)) (and (cons? (tl (tl V4473))) (and (cons? (tl (tl (tl V4473)))) (= () (tl (tl (tl (tl V4473)))))))))) (append (compile1 (hd (tl V4473))) (cons (cons iJF (compile1 (hd (tl (tl V4473))))) (cons (cons iJMP (compile1 (hd (tl (tl (tl V4473)))))) ())))) ((and (cons? V4473) (and (= $do (hd V4473)) (and (cons? (tl V4473)) (and (cons? (tl (tl V4473))) (= () (tl (tl (tl V4473)))))))) (append (compile1 (hd (tl V4473))) (cons (cons iPop ()) (compile1 (hd (tl (tl V4473))))))) ((and (cons? V4473) (and (= $defun (hd V4473)) (and (cons? (tl V4473)) (and (cons? (tl (tl V4473))) (= () (tl (tl (tl V4473)))))))) (append (compile1 (hd (tl (tl V4473)))) (cons (cons iConst (cons (hd (tl V4473)) ())) (cons (cons iDefun ()) ())))) ((and (cons? V4473) (and (= $app (hd V4473)) (and (cons? (tl V4473)) (and (cons? (hd (tl V4473))) (and (= $symbol (hd (hd (tl V4473)))) (and (cons? (tl (hd (tl V4473)))) (and (= () (tl (tl (hd (tl V4473))))) (primitive? (hd (tl (hd (tl V4473)))))))))))) (compile-primitive-call (hd (tl (hd (tl V4473)))) (tl (tl V4473)))) ((and (cons? V4473) (and (= $app (hd V4473)) (cons? (tl V4473)))) (cons (cons iMark ()) (append (compile-apply (hd (tl V4473)) (tl (tl V4473))) (cons (cons iApply ()) ())))) ((and (cons? V4473) (and (= $abs (hd V4473)) (and (cons? (tl V4473)) (= () (tl (tl V4473)))))) (cons (cons iFreeze (cons (cons iGrab (compile-tail (hd (tl V4473)))) ())) ())) ((and (cons? V4473) (and (= $freeze (hd V4473)) (and (cons? (tl V4473)) (= () (tl (tl V4473)))))) (cons (cons iFreeze (compile-tail (hd (tl V4473)))) ())) ((and (cons? V4473) (and (= $trap (hd V4473)) (and (cons? (tl V4473)) (and (cons? (tl (tl V4473))) (= () (tl (tl (tl V4473)))))))) (append (compile1 (hd (tl (tl V4473)))) (cons (cons iSetJmp (append (compile1 (hd (tl V4473))) (cons (cons iClearJmp ()) ()))) ()))) (true (shen.f_error compile1))))

(defun compile-tail (V4475) (cond ((and (cons? V4475) (and (= $if (hd V4475)) (and (cons? (tl V4475)) (and (cons? (tl (tl V4475))) (and (cons? (tl (tl (tl V4475)))) (= () (tl (tl (tl (tl V4475)))))))))) (append (compile1 (hd (tl V4475))) (cons (cons iJF (compile-tail (hd (tl (tl V4475))))) (cons (cons iJMP (compile-tail (hd (tl (tl (tl V4475)))))) ())))) ((and (cons? V4475) (and (= $do (hd V4475)) (and (cons? (tl V4475)) (and (cons? (tl (tl V4475))) (= () (tl (tl (tl V4475)))))))) (append (compile1 (hd (tl V4475))) (cons (cons iPop ()) (compile-tail (hd (tl (tl V4475))))))) ((and (cons? V4475) (and (= $abs (hd V4475)) (and (cons? (tl V4475)) (= () (tl (tl V4475)))))) (cons (cons iGrab (compile-tail (hd (tl V4475)))) ())) ((and (cons? V4475) (and (= $app (hd V4475)) (and (cons? (tl V4475)) (and (cons? (hd (tl V4475))) (and (= $symbol (hd (hd (tl V4475)))) (and (cons? (tl (hd (tl V4475)))) (and (= () (tl (tl (hd (tl V4475))))) (primitive? (hd (tl (hd (tl V4475)))))))))))) (append (compile-primitive-call (hd (tl (hd (tl V4475)))) (tl (tl V4475))) (cons (cons iReturn ()) ()))) ((and (cons? V4475) (and (= $app (hd V4475)) (cons? (tl V4475)))) (append (compile-apply (hd (tl V4475)) (tl (tl V4475))) (cons (cons iTailApply ()) ()))) ((and (cons? V4475) (and (= $freeze (hd V4475)) (and (cons? (tl V4475)) (= () (tl (tl V4475)))))) (cons (cons iFreeze (compile-tail (hd (tl V4475)))) ())) (true (append (compile1 V4475) (cons (cons iReturn ()) ())))))

(defun compile-primitive-call (V4478 V4479) (cond ((= (length V4479) (primitive-arity V4478)) (append (compile-arg-list V4479) (cons (cons iPrimCall (cons (primitive-id V4478) ())) ()))) (true (compile1 (curry-primitive V4478 V4479)))))

(defun compile-apply (V4482 V4483) (append (compile-arg-list (reverse V4483)) (compile-function V4482)))

(defun compile-function (V4485) (cond ((and (cons? V4485) (and (= $symbol (hd V4485)) (and (cons? (tl V4485)) (= () (tl (tl V4485)))))) (cons (cons iConst (tl V4485)) (cons (cons iGetF ()) ()))) (true (compile1 V4485))))

(defun compile-arg-list (V4487) (mapcan (lambda V4471 (compile1 V4471)) V4487))

(defun curry-primitive (V4490 V4491) (let Count (- (primitive-arity V4490) (length V4491)) (let Pad (rrange Count) (let PadList (map (lambda X (cons $var (cons X ()))) Pad) (fold-left (lambda X (lambda Y (cons $abs (cons X ())))) (cons $app (cons (cons $symbol (cons V4490 ())) (append V4491 PadList))) Pad)))))

(defun rrange (V4493) (rrange0 V4493 0 ()))

(defun rrange0 (V4498 V4499 V4500) (cond ((= V4499 V4498) V4500) (true (rrange0 V4498 (+ V4499 1) (cons V4499 V4500)))))

(defun kl->bytecode (V4502) (append (compile-tail (de-bruijn V4502)) (cons (cons iHalt ()) ())))



