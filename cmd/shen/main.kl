"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(load "primitive.shen")

(load "de-bruijn.shen")

(load "compile.shen")

(defun kl->bytecode (V1447.000000) (compile1 true (de-bruijn V1447.000000)))

(defun shen-to-kl (V1449.000000) (shen.elim-def (shen.walk (lambda V1445.000000 (macroexpand V1445.000000)) V1449.000000)))

(set *bytecode-stream* (open "fifo" out))

(defun ep (V1452.000000 V1453.000000) (let KL (shen-to-kl V1452.000000) (let BC (kl->bytecode KL) (let BC1 (append BC (cons (cons iHalt ()) ())) (let Str (shen.app BC1 "" shen.r) (let _ (pr Str V1453.000000) BC))))))

(defun repl () (let Input (read (stinput)) (let Output (value *bytecode-stream*) (let _ (pr (trap-error (ep Input Output) (lambda X (error-to-string X))) (stoutput)) (repl)))))



