"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun de-bruijn (V3163) (de-bruijn0 () V3163))

(defun de-bruijn0 (V3166 V3167) (cond ((= () V3167) (cons $const (cons () ()))) ((or (boolean? V3167) (or (number? V3167) (string? V3167))) (cons $const (cons V3167 ()))) ((and (cons? V3167) (and (= let (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (and (cons? (tl (tl (tl V3167)))) (= () (tl (tl (tl (tl V3167)))))))))) (cons $app (cons (cons $abs (cons (de-bruijn0 (cons (hd (tl V3167)) V3166) (hd (tl (tl (tl V3167))))) ())) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) ())))) ((and (cons? V3167) (and (= lambda (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (= () (tl (tl (tl V3167)))))))) (cons $abs (cons (de-bruijn0 (cons (hd (tl V3167)) V3166) (hd (tl (tl V3167)))) ()))) ((and (cons? V3167) (and (= freeze (hd V3167)) (and (cons? (tl V3167)) (= () (tl (tl V3167)))))) (cons $freeze (cons (de-bruijn0 V3166 (hd (tl V3167))) ()))) ((and (cons? V3167) (and (= if (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (and (cons? (tl (tl (tl V3167)))) (= () (tl (tl (tl (tl V3167)))))))))) (cons $if (cons (de-bruijn0 V3166 (hd (tl V3167))) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) (cons (de-bruijn0 V3166 (hd (tl (tl (tl V3167))))) ()))))) ((and (cons? V3167) (and (= do (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (= () (tl (tl (tl V3167)))))))) (cons $do (cons (de-bruijn0 V3166 (hd (tl V3167))) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) ())))) ((and (cons? V3167) (and (= defun (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (and (cons? (tl (tl (tl V3167)))) (= () (tl (tl (tl (tl V3167)))))))))) (cons $defun (cons (hd (tl V3167)) (cons (de-bruijn0 V3166 (defun-rewrite (hd (tl (tl V3167))) (hd (tl (tl (tl V3167)))))) ())))) ((and (cons? V3167) (= cond (hd V3167))) (de-bruijn0 V3166 (cond-rewrite (tl V3167)))) ((and (cons? V3167) (and (= and (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (= () (tl (tl (tl V3167)))))))) (cons $if (cons (de-bruijn0 V3166 (hd (tl V3167))) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) (cons (cons $const (cons false ())) ()))))) ((and (cons? V3167) (and (= or (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (= () (tl (tl (tl V3167)))))))) (cons $if (cons (de-bruijn0 V3166 (hd (tl V3167))) (cons (cons $const (cons true ())) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) ()))))) ((and (cons? V3167) (and (= trap-error (hd V3167)) (and (cons? (tl V3167)) (and (cons? (tl (tl V3167))) (= () (tl (tl (tl V3167)))))))) (cons $trap (cons (de-bruijn0 V3166 (hd (tl V3167))) (cons (de-bruijn0 V3166 (hd (tl (tl V3167)))) ())))) ((cons? V3167) (cons $app (cons (de-bruijn0 V3166 (hd V3167)) (map (de-bruijn0 V3166) (tl V3167))))) (true (de-bruijn-index V3167 V3166))))

(defun de-bruijn-index (V3174 V3175) (let Result (find-env V3174 V3175) (if (= Result (fail)) (cons $symbol (cons V3174 ())) Result)))

(defun find-env (V3178 V3179) (find-env0 V3178 0 V3179))

(defun find-env0 (V3190 V3191 V3192) (cond ((= () V3192) (fail)) ((and (cons? V3192) (= (hd V3192) V3190)) (cons $var (cons V3191 ()))) ((cons? V3192) (find-env0 V3190 (+ V3191 1) (tl V3192))) (true (shen.f_error find-env0))))

(defun defun-rewrite (V3195 V3196) (cond ((= () V3195) (cons freeze (cons V3196 ()))) (true (cons freeze (cons (defun-rewrite0 V3195 V3196) ())))))

(defun defun-rewrite0 (V3199 V3200) (cond ((= () V3199) V3200) ((cons? V3199) (cons lambda (cons (hd V3199) (cons (defun-rewrite0 (tl V3199) V3200) ())))) (true (shen.f_error defun-rewrite0))))

(defun cond-rewrite (V3202) (cond ((= () V3202) (cons simple-error (cons "no match cond" ()))) ((and (cons? V3202) (and (cons? (hd V3202)) (and (cons? (tl (hd V3202))) (= () (tl (tl (hd V3202))))))) (cons if (cons (hd (hd V3202)) (cons (hd (tl (hd V3202))) (cons (cond-rewrite (tl V3202)) ()))))) (true (shen.f_error cond-rewrite))))



