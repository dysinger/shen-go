"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun de-bruijn (V1635) (de-bruijn0 () V1635))

(defun de-bruijn0 (V1638 V1639) (cond ((= () V1639) (cons $const (cons () ()))) ((or (boolean? V1639) (or (number? V1639) (string? V1639))) (cons $const (cons V1639 ()))) ((and (cons? V1639) (and (= let (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (and (cons? (tl (tl (tl V1639)))) (= () (tl (tl (tl (tl V1639)))))))))) (cons $app (cons (cons $abs (cons (de-bruijn0 (cons (hd (tl V1639)) V1638) (hd (tl (tl (tl V1639))))) ())) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) ())))) ((and (cons? V1639) (and (= lambda (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (= () (tl (tl (tl V1639)))))))) (cons $abs (cons (de-bruijn0 (cons (hd (tl V1639)) V1638) (hd (tl (tl V1639)))) ()))) ((and (cons? V1639) (and (= freeze (hd V1639)) (and (cons? (tl V1639)) (= () (tl (tl V1639)))))) (cons $freeze (cons (de-bruijn0 V1638 (hd (tl V1639))) ()))) ((and (cons? V1639) (and (= if (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (and (cons? (tl (tl (tl V1639)))) (= () (tl (tl (tl (tl V1639)))))))))) (cons $if (cons (de-bruijn0 V1638 (hd (tl V1639))) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) (cons (de-bruijn0 V1638 (hd (tl (tl (tl V1639))))) ()))))) ((and (cons? V1639) (and (= do (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (= () (tl (tl (tl V1639)))))))) (cons $do (cons (de-bruijn0 V1638 (hd (tl V1639))) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) ())))) ((and (cons? V1639) (and (= defun (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (and (cons? (tl (tl (tl V1639)))) (= () (tl (tl (tl (tl V1639)))))))))) (cons $defun (cons (hd (tl V1639)) (cons (de-bruijn0 V1638 (defun-rewrite (hd (tl (tl V1639))) (hd (tl (tl (tl V1639)))))) ())))) ((and (cons? V1639) (= cond (hd V1639))) (de-bruijn0 V1638 (cond-rewrite (tl V1639)))) ((and (cons? V1639) (and (= and (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (= () (tl (tl (tl V1639)))))))) (cons $if (cons (de-bruijn0 V1638 (hd (tl V1639))) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) (cons (cons $const (cons false ())) ()))))) ((and (cons? V1639) (and (= or (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (= () (tl (tl (tl V1639)))))))) (cons $if (cons (de-bruijn0 V1638 (hd (tl V1639))) (cons (cons $const (cons true ())) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) ()))))) ((and (cons? V1639) (and (= trap-error (hd V1639)) (and (cons? (tl V1639)) (and (cons? (tl (tl V1639))) (= () (tl (tl (tl V1639)))))))) (cons $trap (cons (de-bruijn0 V1638 (hd (tl V1639))) (cons (de-bruijn0 V1638 (hd (tl (tl V1639)))) ())))) ((and (cons? V1639) (primitive? (hd V1639))) (cons $prim (cons (hd V1639) (map (de-bruijn0 V1638) (tl V1639))))) ((cons? V1639) (cons $app (cons (de-bruijn0 V1638 (hd V1639)) (map (de-bruijn0 V1638) (tl V1639))))) (true (de-bruijn-index V1639 V1638))))

(defun de-bruijn-index (V1646 V1647) (let Result (find-env V1646 V1647) (if (= Result (fail)) (cons $symbol (cons V1646 ())) Result)))

(defun find-env (V1650 V1651) (find-env0 V1650 0 V1651))

(defun find-env0 (V1662 V1663 V1664) (cond ((= () V1664) (fail)) ((and (cons? V1664) (= (hd V1664) V1662)) (cons $var (cons V1663 ()))) ((cons? V1664) (find-env0 V1662 (+ V1663 1) (tl V1664))) (true (shen.f_error find-env0))))

(defun defun-rewrite (V1667 V1668) (cond ((= () V1667) (cons freeze (cons V1668 ()))) (true (defun-rewrite0 V1667 V1668))))

(defun defun-rewrite0 (V1671 V1672) (cond ((= () V1671) V1672) ((cons? V1671) (cons lambda (cons (hd V1671) (cons (defun-rewrite0 (tl V1671) V1672) ())))) (true (shen.f_error defun-rewrite0))))

(defun cond-rewrite (V1674) (cond ((= () V1674) (cons simple-error (cons "no match cond" ()))) ((and (cons? V1674) (and (cons? (hd V1674)) (and (cons? (tl (hd V1674))) (= () (tl (tl (hd V1674))))))) (cons if (cons (hd (hd V1674)) (cons (hd (tl (hd V1674))) (cons (cond-rewrite (tl V1674)) ()))))) (true (shen.f_error cond-rewrite))))



