"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun de-bruijn (V1681) (de-bruijn0 () V1681))

(defun de-bruijn0 (V1684 V1685) (cond ((= () V1685) (cons $const (cons () ()))) ((or (boolean? V1685) (or (number? V1685) (string? V1685))) (cons $const (cons V1685 ()))) ((and (cons? V1685) (and (= let (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (and (cons? (tl (tl (tl V1685)))) (= () (tl (tl (tl (tl V1685)))))))))) (cons $app (cons (cons $abs (cons (de-bruijn0 (cons (hd (tl V1685)) V1684) (hd (tl (tl (tl V1685))))) ())) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) ())))) ((and (cons? V1685) (and (= lambda (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (= () (tl (tl (tl V1685)))))))) (cons $abs (cons (de-bruijn0 (cons (hd (tl V1685)) V1684) (hd (tl (tl V1685)))) ()))) ((and (cons? V1685) (and (= freeze (hd V1685)) (and (cons? (tl V1685)) (= () (tl (tl V1685)))))) (cons $freeze (cons (de-bruijn0 V1684 (hd (tl V1685))) ()))) ((and (cons? V1685) (and (= if (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (and (cons? (tl (tl (tl V1685)))) (= () (tl (tl (tl (tl V1685)))))))))) (cons $if (cons (de-bruijn0 V1684 (hd (tl V1685))) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) (cons (de-bruijn0 V1684 (hd (tl (tl (tl V1685))))) ()))))) ((and (cons? V1685) (and (= do (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (= () (tl (tl (tl V1685)))))))) (cons $do (cons (de-bruijn0 V1684 (hd (tl V1685))) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) ())))) ((and (cons? V1685) (and (= defun (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (and (cons? (tl (tl (tl V1685)))) (= () (tl (tl (tl (tl V1685)))))))))) (cons $defun (cons (hd (tl V1685)) (cons (de-bruijn0 V1684 (defun-rewrite (hd (tl (tl V1685))) (hd (tl (tl (tl V1685)))))) ())))) ((and (cons? V1685) (= cond (hd V1685))) (de-bruijn0 V1684 (cond-rewrite (tl V1685)))) ((and (cons? V1685) (and (= and (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (= () (tl (tl (tl V1685)))))))) (cons $if (cons (de-bruijn0 V1684 (hd (tl V1685))) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) (cons (cons $const (cons false ())) ()))))) ((and (cons? V1685) (and (= or (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (= () (tl (tl (tl V1685)))))))) (cons $if (cons (de-bruijn0 V1684 (hd (tl V1685))) (cons (cons $const (cons true ())) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) ()))))) ((and (cons? V1685) (and (= trap-error (hd V1685)) (and (cons? (tl V1685)) (and (cons? (tl (tl V1685))) (= () (tl (tl (tl V1685)))))))) (cons $trap (cons (de-bruijn0 V1684 (hd (tl V1685))) (cons (de-bruijn0 V1684 (hd (tl (tl V1685)))) ())))) ((and (cons? V1685) (primitive? (hd V1685))) (cons $prim (cons (hd V1685) (map (de-bruijn0 V1684) (tl V1685))))) ((cons? V1685) (cons $app (cons (de-bruijn0 V1684 (hd V1685)) (map (de-bruijn0 V1684) (tl V1685))))) (true (de-bruijn-index V1685 V1684))))

(defun de-bruijn-index (V1692 V1693) (let Result (find-env V1692 V1693) (if (= Result (fail)) (cons $symbol (cons V1692 ())) Result)))

(defun find-env (V1696 V1697) (find-env0 V1696 0 V1697))

(defun find-env0 (V1708 V1709 V1710) (cond ((= () V1710) (fail)) ((and (cons? V1710) (= (hd V1710) V1708)) (cons $var (cons V1709 ()))) ((cons? V1710) (find-env0 V1708 (+ V1709 1) (tl V1710))) (true (shen.f_error find-env0))))

(defun defun-rewrite (V1713 V1714) (cond ((= () V1713) (cons freeze (cons V1714 ()))) (true (defun-rewrite0 V1713 V1714))))

(defun defun-rewrite0 (V1717 V1718) (cond ((= () V1717) V1718) ((cons? V1717) (cons lambda (cons (hd V1717) (cons (defun-rewrite0 (tl V1717) V1718) ())))) (true (shen.f_error defun-rewrite0))))

(defun cond-rewrite (V1720) (cond ((= () V1720) (cons simple-error (cons "no match cond" ()))) ((and (cons? V1720) (and (cons? (hd V1720)) (and (cons? (tl (hd V1720))) (= () (tl (tl (hd V1720))))))) (cons if (cons (hd (hd V1720)) (cons (hd (tl (hd V1720))) (cons (cond-rewrite (tl V1720)) ()))))) (true (shen.f_error cond-rewrite))))



